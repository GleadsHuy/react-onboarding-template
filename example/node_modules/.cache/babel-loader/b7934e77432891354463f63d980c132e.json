{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction pushProp(target, key, value) {\n  if (key === 'className') {\n    target.className = [target.className, value].join(' ').trim();\n  } else if (key === 'style') {\n    target.style = __assign({}, target.style, value);\n  } else if (typeof value === 'function') {\n    var oldFn_1 = target[key];\n    target[key] = oldFn_1 ? function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      oldFn_1.apply(void 0, args);\n      value.apply(void 0, args);\n    } : value;\n  } else if (\n  // skip merging undefined values\n  value === undefined ||\n  // skip if both value are the same primitive value\n  typeof value !== 'object' && value === target[key]) {\n    return;\n  } else if (!(key in target)) {\n    target[key] = value;\n  } else {\n    throw new Error(\"Didn\\u2019t know how to merge prop '\" + key + \"'. \" + \"Only 'className', 'style', and event handlers are supported\");\n  }\n}\n/**\n * Merges sets of props together:\n *  - duplicate `className` props get concatenated\n *  - duplicate `style` props get shallow merged (later props have precedence for conflicting rules)\n *  - duplicate functions (to be used for event handlers) get called in order from left to right\n * @param props Sets of props to merge together. Later props have precedence.\n */\nfunction mergeProps() {\n  var props = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    props[_i] = arguments[_i];\n  }\n  if (props.length === 1) {\n    return props[0];\n  }\n  return props.reduce(function (merged, ps) {\n    for (var key in ps) {\n      pushProp(merged, key, ps[key]);\n    }\n    return merged;\n  }, {});\n}\nexports.default = mergeProps;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,SAAS,QAAQ,CACf,MAA8B,EAC9B,GAAW,EACX,KAAU,EAAA;EAEV,IAAI,GAAG,KAAK,WAAW,EAAE;IACvB,MAAM,CAAC,SAAS,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE;GAC9D,MAAM,IAAI,GAAG,KAAK,OAAO,EAAE;IAC1B,MAAM,CAAC,KAAK,GAAA,QAAA,CAAA,CAAA,CAAA,EAAQ,MAAM,CAAC,KAAK,EAAK,KAAK,CAAE;GAC7C,MAAM,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;IACtC,IAAM,OAAK,GAAG,MAAM,CAAC,GAAG,CAAyB;IACjD,MAAM,CAAC,GAAG,CAAC,GAAG,OAAK,GAAG,YAAA;MAAC,IAAA,IAAA,GAAA,EAAA;WAAA,IAAA,EAAA,GAAA,CAAc,EAAd,EAAA,GAAA,SAAA,CAAA,MAAc,EAAd,EAAA,EAAc,EAAA;QAAd,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;MACrB,OAAK,CAAA,KAAA,CAAA,KAAA,CAAA,EAAI,IAAI,CAAA;MACZ,KAAkB,CAAA,KAAA,CAAA,KAAA,CAAA,EAAI,IAAI,CAAA;IAC7B,CAAC,GAAG,KAAK;GACV,MAAM;EACH;EACA,KAAK,KAAK,SAAS;EACnB;EACC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,MAAM,CAAC,GAAG,CAAE,EACpD;IACF;GACD,MAAM,IAAI,EAAE,GAAG,IAAI,MAAM,CAAC,EAAE;IAC3B,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK;GACpB,MAAM;IACL,MAAM,IAAI,KAAK,CACb,sCAAA,GAAkC,GAAG,GAAA,KAAK,GAC1C,6DAA6D,CAC9D;EACF;AACH;AAEA;;;;;;AAMG;AACH,SAAwB,UAAU,GAAA;EAAiB,IAAA,KAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAW,EAAX,EAAA,GAAA,SAAA,CAAA,MAAW,EAAX,EAAA,EAAW,EAAA;IAAX,KAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EASjD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO,KAAK,CAAC,CAAC,CAAQ;EACvB;EAED,OAAO,KAAK,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,EAAO,EAAA;IAClC,KAAK,IAAM,GAAG,IAAI,EAAE,EAAE;MACpB,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;IAC/B;IACD,OAAO,MAAM;EACf,CAAC,EAAE,CAAA,CAAE,CAAQ;AACf;AAnBA,OAAA,CAAA,OAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction pushProp(target, key, value) {\n    if (key === 'className') {\n        target.className = [target.className, value].join(' ').trim();\n    }\n    else if (key === 'style') {\n        target.style = __assign({}, target.style, value);\n    }\n    else if (typeof value === 'function') {\n        var oldFn_1 = target[key];\n        target[key] = oldFn_1 ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            oldFn_1.apply(void 0, args);\n            value.apply(void 0, args);\n        } : value;\n    }\n    else if (\n    // skip merging undefined values\n    value === undefined ||\n        // skip if both value are the same primitive value\n        (typeof value !== 'object' && value === target[key])) {\n        return;\n    }\n    else if (!(key in target)) {\n        target[key] = value;\n    }\n    else {\n        throw new Error(\"Didn\\u2019t know how to merge prop '\" + key + \"'. \" +\n            \"Only 'className', 'style', and event handlers are supported\");\n    }\n}\n/**\n * Merges sets of props together:\n *  - duplicate `className` props get concatenated\n *  - duplicate `style` props get shallow merged (later props have precedence for conflicting rules)\n *  - duplicate functions (to be used for event handlers) get called in order from left to right\n * @param props Sets of props to merge together. Later props have precedence.\n */\nfunction mergeProps() {\n    var props = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        props[_i] = arguments[_i];\n    }\n    if (props.length === 1) {\n        return props[0];\n    }\n    return props.reduce(function (merged, ps) {\n        for (var key in ps) {\n            pushProp(merged, key, ps[key]);\n        }\n        return merged;\n    }, {});\n}\nexports.default = mergeProps;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}