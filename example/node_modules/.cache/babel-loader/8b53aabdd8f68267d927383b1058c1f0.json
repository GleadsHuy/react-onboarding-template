{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\huynguyen\\\\Documents\\\\react-onboarding-template\\\\react-onboarding-template\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\huynguyen\\\\Documents\\\\react-onboarding-template\\\\react-onboarding-template\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"C:\\\\Users\\\\huynguyen\\\\Documents\\\\react-onboarding-template\\\\react-onboarding-template\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\huynguyen\\\\Documents\\\\react-onboarding-template\\\\react-onboarding-template\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\Users\\\\huynguyen\\\\Documents\\\\react-onboarding-template\\\\react-onboarding-template\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport * as React from 'react';\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === 'checkbox';\n};\nvar isDateObject = function isDateObject(data) {\n  return data instanceof Date;\n};\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value == null;\n};\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n};\nvar getControllerValue = function getControllerValue(event) {\n  return isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n};\nvar getNodeParentName = function getNodeParentName(name) {\n  return name.substring(0, name.search(/.\\d/)) || name;\n};\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).some(function (current) {\n    return getNodeParentName(name) === current;\n  });\n};\nvar compact = function compact(value) {\n  return value.filter(Boolean);\n};\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\nvar get = function get(obj, path, defaultValue) {\n  if (isObject(obj) && path) {\n    var result = compact(path.split(/[,[\\].]+?/)).reduce(function (result, key) {\n      return isNullOrUndefined(result) ? result : result[key];\n    }, obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n  return undefined;\n};\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = function omit(source, key) {\n  var copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nvar HookFormContext = React.createContext(null);\nvar useFormContext = function useFormContext() {\n  return React.useContext(HookFormContext);\n};\nvar FormProvider = function FormProvider(props) {\n  return React.createElement(HookFormContext.Provider, {\n    value: omit(props, 'children')\n  }, props.children);\n};\nvar getProxyFormState = function getProxyFormState(formState, _proxyFormState, localProxyFormState) {\n  var isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  function createGetter(prop) {\n    return function () {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n  var result = {};\n  for (var key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n  return result;\n};\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\nvar shouldRenderFormState = function shouldRenderFormState(formStateData, _proxyFormState, isRoot) {\n  var formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(function (key) {\n    return _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all);\n  });\n};\nvar convertToArrayPayload = function convertToArrayPayload(value) {\n  return Array.isArray(value) ? value : [value];\n};\nvar shouldSubscribeByName = function shouldSubscribeByName(name, signalName) {\n  return !name || !signalName || name === signalName || convertToArrayPayload(name).some(function (currentName) {\n    return currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName));\n  });\n};\nvar tearDown = function tearDown(_subscription) {\n  if (_subscription.current) {\n    _subscription.current.unsubscribe();\n    _subscription.current = undefined;\n  }\n};\nvar updateSubscriptionProps = function updateSubscriptionProps(_ref) {\n  var _subscription = _ref._subscription,\n    _props = _ref._props;\n  if (_props.current.disabled) {\n    tearDown(_subscription);\n  } else if (!_subscription.current) {\n    _subscription.current = _props.current.subject.subscribe({\n      next: _props.current.callback\n    });\n  }\n};\nfunction useSubscribe(props) {\n  var _subscription = React.useRef();\n  var _props = React.useRef(props);\n  _props.current = props;\n  updateSubscriptionProps({\n    _subscription: _subscription,\n    _props: _props\n  });\n  React.useEffect(function () {\n    updateSubscriptionProps({\n      _subscription: _subscription,\n      _props: _props\n    });\n    return function () {\n      return tearDown(_subscription);\n    };\n  }, []);\n}\nfunction useFormState(props) {\n  var methods = useFormContext();\n  var _ref2 = props || {},\n    _ref2$control = _ref2.control,\n    control = _ref2$control === void 0 ? methods.control : _ref2$control,\n    disabled = _ref2.disabled,\n    name = _ref2.name;\n  var _React$useState = React.useState(control._formState),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    formState = _React$useState2[0],\n    updateFormState = _React$useState2[1];\n  var _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  var _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled: disabled,\n    callback: function callback(formState) {\n      return shouldSubscribeByName(_name.current, formState.name) && shouldRenderFormState(formState, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), formState));\n    },\n    subject: control._subjects.state\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\nfunction generateWatchOutput(names, _names, formValues, isGlobal) {\n  var isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n  if (isArray) {\n    return names.map(function (fieldName) {\n      return isGlobal && _names.watch.add(fieldName), get(formValues, fieldName);\n    });\n  }\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\nfunction useWatch(props) {\n  var methods = useFormContext();\n  var _ref3 = props || {},\n    _ref3$control = _ref3.control,\n    control = _ref3$control === void 0 ? methods.control : _ref3$control,\n    name = _ref3.name,\n    defaultValue = _ref3.defaultValue,\n    disabled = _ref3.disabled;\n  var _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled: disabled,\n    subject: control._subjects.watch,\n    callback: function callback(formState) {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        var fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\n        updateValue(isUndefined(_name.current) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? _toConsumableArray(fieldValues) : fieldValues);\n      }\n    }\n  });\n  var _React$useState3 = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    value = _React$useState4[0],\n    updateValue = _React$useState4[1];\n  React.useEffect(function () {\n    control._removeUnmounted();\n  });\n  return value;\n}\nfunction useController(props) {\n  var methods = useFormContext();\n  var name = props.name,\n    _props$control = props.control,\n    control = _props$control === void 0 ? methods.control : _props$control,\n    shouldUnregister = props.shouldUnregister;\n  var value = useWatch({\n    control: control,\n    name: name,\n    defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue))\n  });\n  var formState = useFormState({\n    control: control,\n    name: name\n  });\n  var _name = React.useRef(name);\n  _name.current = name;\n  var registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value: value\n  }));\n  React.useEffect(function () {\n    var updateMounted = function updateMounted(name, value) {\n      var field = get(control._fields, name);\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n    updateMounted(name, true);\n    return function () {\n      var _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n      if (isNameInFieldArray(control._names.array, name) ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name, {\n          keepDefaultValue: true\n        });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister]);\n  return {\n    field: {\n      onChange: function onChange(event) {\n        registerProps.onChange({\n          target: {\n            value: getControllerValue(event),\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: function onBlur() {\n        registerProps.onBlur({\n          target: {\n            value: value,\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name: name,\n      value: value,\n      ref: function ref(elm) {\n        var field = get(control._fields, name);\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: function focus() {\n              return elm.focus();\n            },\n            setCustomValidity: function setCustomValidity(message) {\n              return elm.setCustomValidity(message);\n            },\n            reportValidity: function reportValidity() {\n              return elm.reportValidity();\n            }\n          };\n        }\n      }\n    },\n    formState: formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\nvar Controller = function Controller(props) {\n  return props.render(useController(props));\n};\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  return validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n    types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), _defineProperty({}, type, message || true))\n  }) : {};\n};\nvar isKey = function isKey(value) {\n  return /^\\w*$/.test(value);\n};\nvar stringToPath = function stringToPath(input) {\n  return compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n};\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nvar focusFieldBy = function focusFieldBy(fields, callback, fieldsNames) {\n  var _iterator = _createForOfIteratorHelper(fieldsNames || Object.keys(fields)),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      var field = get(fields, key);\n      if (field) {\n        var _f = field._f;\n        var current = omit(field, '_f');\n        if (_f && callback(_f.name)) {\n          if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n            break;\n          } else if (_f.refs) {\n            _f.refs[0].focus();\n            break;\n          }\n        } else if (isObject(current)) {\n          focusFieldBy(current, callback);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\nvar getFocusFieldName = function getFocusFieldName(name, index) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || \"\".concat(name, \".\").concat(isUndefined(options.focusIndex) ? index : options.focusIndex, \".\") : '';\n};\nvar mapCurrentIds = function mapCurrentIds(values, _fieldIds, keyName) {\n  return values.map(function (value, index) {\n    var output = _fieldIds.current[index];\n    return Object.assign(Object.assign({}, value), output ? _defineProperty({}, keyName, output[keyName]) : {});\n  });\n};\nvar generateId = function generateId() {\n  var d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar mapIds = function mapIds() {\n  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(function (value) {\n    return Object.assign(Object.assign({}, value[keyName] ? {} : _defineProperty({}, keyName, generateId())), value);\n  });\n};\nfunction append(data, value) {\n  return [].concat(_toConsumableArray(convertToArrayPayload(data)), _toConsumableArray(convertToArrayPayload(value)));\n}\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return Array.isArray(value) ? value.map(function () {\n    return undefined;\n  }) : undefined;\n};\nfunction insert(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(convertToArrayPayload(value)), _toConsumableArray(data.slice(index)));\n}\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nvar omitKeys = function omitKeys(fields, keyName) {\n  return fields.map(function () {\n    var field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return omit(field, keyName);\n  });\n};\nfunction prepend(data, value) {\n  return [].concat(_toConsumableArray(convertToArrayPayload(value)), _toConsumableArray(convertToArrayPayload(data)));\n}\nfunction removeAtIndexes(data, indexes) {\n  var i = 0;\n  var temp = _toConsumableArray(data);\n  var _iterator2 = _createForOfIteratorHelper(indexes),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var index = _step2.value;\n      temp.splice(index - i, 1);\n      i++;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort(function (a, b) {\n    return a - b;\n  }));\n};\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nvar updateAt = function updateAt(fieldValues, index, value) {\n  fieldValues[index] = value;\n  return fieldValues;\n};\nvar useFieldArray = function useFieldArray(props) {\n  var methods = useFormContext();\n  var _props$control2 = props.control,\n    control = _props$control2 === void 0 ? methods.control : _props$control2,\n    name = props.name,\n    _props$keyName = props.keyName,\n    keyName = _props$keyName === void 0 ? 'id' : _props$keyName,\n    shouldUnregister = props.shouldUnregister;\n  var _React$useState5 = React.useState(mapIds(control._getFieldArray(name), keyName)),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    fields = _React$useState6[0],\n    setFields = _React$useState6[1];\n  var _fieldIds = React.useRef(fields);\n  var _name = React.useRef(name);\n  var _actioned = React.useRef(false);\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n  useSubscribe({\n    callback: function callback(_ref6) {\n      var values = _ref6.values,\n        fieldArrayName = _ref6.name;\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array\n  });\n  var updateValues = React.useCallback(function (updatedFieldArrayValuesWithKey) {\n    var updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\n    _actioned.current = true;\n    set(control._formValues, name, updatedFieldArrayValues);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n  var append$1 = function append$1(value, options) {\n    var appendValue = convertToArrayPayload(value);\n    var updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValuesWithKey.length - appendValue.length, options);\n  };\n  var prepend$1 = function prepend$1(value, options) {\n    var updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n  var remove = function remove(index) {\n    var updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  var insert$1 = function insert$1(index, value, options) {\n    var updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n  var swap = function swap(indexA, indexB) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  var move = function move(from, to) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  var update = function update(index, value) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    var updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, updateValues(_fieldIds.current), true, false);\n    setFields(_fieldIds.current);\n  };\n  var replace = function replace(value) {\n    var updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(name, function () {\n      return updatedFieldArrayValuesWithKey;\n    }, {}, updateValues(updatedFieldArrayValuesWithKey), true, false);\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  React.useEffect(function () {\n    control._stateFlags.action = false;\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      var _iterator3 = _createForOfIteratorHelper(control._names.watch),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var watchField = _step3.value;\n          if (name.startsWith(watchField)) {\n            control._subjects.state.next({});\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    if (_actioned.current) {\n      control._executeSchema([name]).then(function (result) {\n        var error = get(result.errors, name);\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors\n          });\n        }\n      });\n    }\n    control._subjects.watch.next({\n      name: name,\n      values: control._formValues\n    });\n    control._names.focus && focusFieldBy(control._fields, function (key) {\n      return key.startsWith(control._names.focus);\n    });\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(function () {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return function () {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\nfunction cloneObject(data) {\n  var copy;\n  var isArray = Array.isArray(data);\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (var key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n  return copy;\n}\nfunction createSubject() {\n  var _observers = [];\n  var next = function next(value) {\n    var _iterator4 = _createForOfIteratorHelper(_observers),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var observer = _step4.value;\n        observer.next(value);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  };\n  var subscribe = function subscribe(observer) {\n    _observers.push(observer);\n    return {\n      unsubscribe: function unsubscribe() {\n        _observers = _observers.filter(function (o) {\n          return o !== observer;\n        });\n      }\n    };\n  };\n  var unsubscribe = function unsubscribe() {\n    _observers = [];\n  };\n  return {\n    get observers() {\n      return _observers;\n    },\n    next: next,\n    subscribe: subscribe,\n    unsubscribe: unsubscribe\n  };\n}\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n  var keys1 = Object.keys(object1);\n  var keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (var _i = 0, _keys = keys1; _i < _keys.length; _i++) {\n    var key = _keys[_i];\n    var val1 = object1[key];\n    if (!keys2.includes(key)) {\n      return false;\n    }\n    if (key !== 'ref') {\n      var val2 = object2[key];\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nvar getValidationModes = function getValidationModes(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched\n  };\n};\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\nvar isFileInput = function isFileInput(element) {\n  return element.type === 'file';\n};\nvar isHTMLElement = function isHTMLElement(value) {\n  return value instanceof HTMLElement;\n};\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === \"select-multiple\";\n};\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === 'radio';\n};\nvar isRadioOrCheckboxFunction = function isRadioOrCheckboxFunction(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nvar live = function live(ref) {\n  return isHTMLElement(ref) && document.contains(ref);\n};\nfunction baseGet(object, updatePath) {\n  var length = updatePath.slice(0, -1).length;\n  var index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  var updatePath = isKey(path) ? [path] : stringToPath(path);\n  var childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = void 0;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(function (data) {\n        return isObject(data) && !isEmptyObject(data) || isBoolean(data);\n      }).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (option) {\n        return option && option.checked && !option.disabled;\n      }).map(function (option) {\n        return option.value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = function getFieldValueAs(value, _ref7) {\n  var valueAsNumber = _ref7.valueAsNumber,\n    valueAsDate = _ref7.valueAsDate,\n    setValueAs = _ref7.setValueAs;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\nvar defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = function getRadioValue(options) {\n  return Array.isArray(options) ? options.reduce(function (previous, option) {\n    return option && option.checked && !option.disabled ? {\n      isValid: true,\n      value: option.value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\nfunction getFieldValue(_f) {\n  var ref = _f.ref;\n  if (_f.refs ? _f.refs.every(function (ref) {\n    return ref.disabled;\n  }) : ref.disabled) {\n    return;\n  }\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n  if (isMultipleSelect(ref)) {\n    return _toConsumableArray(ref.selectedOptions).map(function (_ref8) {\n      var value = _ref8.value;\n      return value;\n    });\n  }\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\nvar getResolverOptions = function getResolverOptions(fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) {\n  var fields = {};\n  var _iterator5 = _createForOfIteratorHelper(fieldsNames),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var name = _step5.value;\n      var field = get(_fields, name);\n      field && set(fields, name, field._f);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return {\n    criteriaMode: criteriaMode,\n    names: _toConsumableArray(fieldsNames),\n    fields: fields,\n    shouldUseNativeValidation: shouldUseNativeValidation\n  };\n};\nvar hasValidation = function hasValidation(options) {\n  return options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n};\nfunction schemaErrorLookup(errors, _fields, name) {\n  var error = get(errors, name);\n  if (error || isKey(name)) {\n    return {\n      error: error,\n      name: name\n    };\n  }\n  var names = name.split('.');\n  while (names.length) {\n    var fieldName = names.join('.');\n    var field = get(_fields, fieldName);\n    var foundError = get(errors, fieldName);\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name: name\n      };\n    }\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n    names.pop();\n  }\n  return {\n    name: name\n  };\n}\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n  for (var key in source) {\n    var targetValue = target[key];\n    var sourceValue = source[key];\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n  return target;\n}\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  var index = -1;\n  while (++index < values.length) {\n    for (var key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        !isNullOrUndefined(defaultValues) && deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), _defineProperty({}, key, true));\n      }\n    }\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n  return dirtyFields;\n}\nvar setFieldArrayDirtyFields = function setFieldArrayDirtyFields(values, defaultValues, dirtyFields) {\n  return deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n};\nvar skipValidation = function skipValidation(isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar unsetEmptyArray = function unsetEmptyArray(ref, name) {\n  return !compact(get(ref, name, [])).length && unset(ref, name);\n};\nvar isMessage = function isMessage(value) {\n  return isString(value) || React.isValidElement(value);\n};\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: isMessage(result) ? result : '',\n      ref: ref\n    };\n  }\n}\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  return isObject(validationData) && !isRegex(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\nvar validateField = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) {\n    var _field$_f, ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, inputRef, setCustomValidty, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref10, value, message, exceedMax, exceedMin, maxOutput, minOutput, valueNumber, valueDate, maxLengthOutput, minLengthOutput, _exceedMax, _exceedMin, _getValueAndMessage, patternValue, _message, result, validateError, validationResult, key, _validateError;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _field$_f = field._f, ref = _field$_f.ref, refs = _field$_f.refs, required = _field$_f.required, maxLength = _field$_f.maxLength, minLength = _field$_f.minLength, min = _field$_f.min, max = _field$_f.max, pattern = _field$_f.pattern, validate = _field$_f.validate, name = _field$_f.name, valueAsNumber = _field$_f.valueAsNumber, mount = _field$_f.mount, disabled = _field$_f.disabled;\n          if (!(!mount || disabled)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", {});\n        case 3:\n          inputRef = refs ? refs[0] : ref;\n          setCustomValidty = function setCustomValidty(message) {\n            if (shouldUseNativeValidation && inputRef.reportValidity) {\n              inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n              inputRef.reportValidity();\n            }\n          };\n          error = {};\n          isRadio = isRadioInput(ref);\n          isCheckBox = isCheckBoxInput(ref);\n          isRadioOrCheckbox = isRadio || isCheckBox;\n          isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n          appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n          getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n            var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n            var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n            var message = exceedMax ? maxLengthMessage : minLengthMessage;\n            error[name] = Object.assign({\n              type: exceedMax ? maxType : minType,\n              message: message,\n              ref: ref\n            }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n          };\n          if (!(required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid))) {\n            _context.next = 19;\n            break;\n          }\n          _ref10 = isMessage(required) ? {\n            value: !!required,\n            message: required\n          } : getValueAndMessage(required), value = _ref10.value, message = _ref10.message;\n          if (!value) {\n            _context.next = 19;\n            break;\n          }\n          error[name] = Object.assign({\n            type: INPUT_VALIDATION_RULES.required,\n            message: message,\n            ref: inputRef\n          }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n          if (validateAllFieldCriteria) {\n            _context.next = 19;\n            break;\n          }\n          setCustomValidty(message);\n          return _context.abrupt(\"return\", error);\n        case 19:\n          if (!(!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max)))) {\n            _context.next = 28;\n            break;\n          }\n          maxOutput = getValueAndMessage(max);\n          minOutput = getValueAndMessage(min);\n          if (!isNaN(inputValue)) {\n            valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n              exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n              exceedMin = valueNumber < minOutput.value;\n            }\n          } else {\n            valueDate = ref.valueAsDate || new Date(inputValue);\n            if (isString(maxOutput.value)) {\n              exceedMax = valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value)) {\n              exceedMin = valueDate < new Date(minOutput.value);\n            }\n          }\n          if (!(exceedMax || exceedMin)) {\n            _context.next = 28;\n            break;\n          }\n          getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n          if (validateAllFieldCriteria) {\n            _context.next = 28;\n            break;\n          }\n          setCustomValidty(error[name].message);\n          return _context.abrupt(\"return\", error);\n        case 28:\n          if (!((maxLength || minLength) && !isEmpty && isString(inputValue))) {\n            _context.next = 38;\n            break;\n          }\n          maxLengthOutput = getValueAndMessage(maxLength);\n          minLengthOutput = getValueAndMessage(minLength);\n          _exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n          _exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n          if (!(_exceedMax || _exceedMin)) {\n            _context.next = 38;\n            break;\n          }\n          getMinMaxMessage(_exceedMax, maxLengthOutput.message, minLengthOutput.message);\n          if (validateAllFieldCriteria) {\n            _context.next = 38;\n            break;\n          }\n          setCustomValidty(error[name].message);\n          return _context.abrupt(\"return\", error);\n        case 38:\n          if (!(pattern && !isEmpty && isString(inputValue))) {\n            _context.next = 45;\n            break;\n          }\n          _getValueAndMessage = getValueAndMessage(pattern), patternValue = _getValueAndMessage.value, _message = _getValueAndMessage.message;\n          if (!(isRegex(patternValue) && !inputValue.match(patternValue))) {\n            _context.next = 45;\n            break;\n          }\n          error[name] = Object.assign({\n            type: INPUT_VALIDATION_RULES.pattern,\n            message: _message,\n            ref: ref\n          }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, _message));\n          if (validateAllFieldCriteria) {\n            _context.next = 45;\n            break;\n          }\n          setCustomValidty(_message);\n          return _context.abrupt(\"return\", error);\n        case 45:\n          if (!validate) {\n            _context.next = 79;\n            break;\n          }\n          if (!isFunction(validate)) {\n            _context.next = 58;\n            break;\n          }\n          _context.next = 49;\n          return validate(inputValue);\n        case 49:\n          result = _context.sent;\n          validateError = getValidateError(result, inputRef);\n          if (!validateError) {\n            _context.next = 56;\n            break;\n          }\n          error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n          if (validateAllFieldCriteria) {\n            _context.next = 56;\n            break;\n          }\n          setCustomValidty(validateError.message);\n          return _context.abrupt(\"return\", error);\n        case 56:\n          _context.next = 79;\n          break;\n        case 58:\n          if (!isObject(validate)) {\n            _context.next = 79;\n            break;\n          }\n          validationResult = {};\n          _context.t0 = _regeneratorRuntime().keys(validate);\n        case 61:\n          if ((_context.t1 = _context.t0()).done) {\n            _context.next = 75;\n            break;\n          }\n          key = _context.t1.value;\n          if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n            _context.next = 65;\n            break;\n          }\n          return _context.abrupt(\"break\", 75);\n        case 65:\n          _context.t2 = getValidateError;\n          _context.next = 68;\n          return validate[key](inputValue);\n        case 68:\n          _context.t3 = _context.sent;\n          _context.t4 = inputRef;\n          _context.t5 = key;\n          _validateError = (0, _context.t2)(_context.t3, _context.t4, _context.t5);\n          if (_validateError) {\n            validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n            setCustomValidty(_validateError.message);\n            if (validateAllFieldCriteria) {\n              error[name] = validationResult;\n            }\n          }\n          _context.next = 61;\n          break;\n        case 75:\n          if (isEmptyObject(validationResult)) {\n            _context.next = 79;\n            break;\n          }\n          error[name] = Object.assign({\n            ref: inputRef\n          }, validationResult);\n          if (validateAllFieldCriteria) {\n            _context.next = 79;\n            break;\n          }\n          return _context.abrupt(\"return\", error);\n        case 79:\n          setCustomValidty(true);\n          return _context.abrupt(\"return\", error);\n        case 81:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function validateField(_x, _x2, _x3, _x4) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nvar defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nvar isWindowUndefined = typeof window === 'undefined';\nfunction createFormControl() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options = Object.assign(Object.assign({}, defaultOptions), props);\n  var _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  var _fields = {};\n  var _defaultValues = _options.defaultValues || {};\n  var _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n  var _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  var _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  var delayErrorCallback;\n  var timer = 0;\n  var validateFields = {};\n  var _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  var _subjects = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  var validationModeBeforeSubmit = getValidationModes(_options.mode);\n  var validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  var shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n  var debounce = function debounce(callback, wait) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      clearTimeout(timer);\n      timer = window.setTimeout(function () {\n        return callback.apply(void 0, args);\n      }, wait);\n    };\n  };\n  var isFieldWatched = function isFieldWatched(name, isBlurEvent) {\n    return !isBlurEvent && (_names.watchAll || _names.watch.has(name) || _names.watch.has((name.match(/\\w+/) || [])[0]));\n  };\n  var _updateValid = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(shouldSkipRender) {\n      var isValid;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            isValid = false;\n            if (!_proxyFormState.isValid) {\n              _context2.next = 15;\n              break;\n            }\n            if (!_options.resolver) {\n              _context2.next = 10;\n              break;\n            }\n            _context2.t1 = isEmptyObject;\n            _context2.next = 6;\n            return _executeSchema();\n          case 6:\n            _context2.t2 = _context2.sent.errors;\n            _context2.t0 = (0, _context2.t1)(_context2.t2);\n            _context2.next = 13;\n            break;\n          case 10:\n            _context2.next = 12;\n            return executeBuildInValidation(_fields, true);\n          case 12:\n            _context2.t0 = _context2.sent;\n          case 13:\n            isValid = _context2.t0;\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\n              _formState.isValid = isValid;\n              _subjects.state.next({\n                isValid: isValid\n              });\n            }\n          case 15:\n            return _context2.abrupt(\"return\", isValid);\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function _updateValid(_x5) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n  var _updateFieldArray = function _updateFieldArray(name, method, args) {\n    var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n    if (shouldSetFields && get(_fields, name)) {\n      var fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n    if (Array.isArray(get(_formState.errors, name))) {\n      var errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      var touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n  var updateErrors = function updateErrors(name, error) {\n    return set(_formState.errors, name, error), _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n  var updateValidAndValue = function updateValidAndValue(name, shouldSkipSetValueAs, ref) {\n    var field = get(_fields, name);\n    if (field) {\n      var defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n    _stateFlags.mount && _updateValid();\n  };\n  var updateTouchAndDirty = function updateTouchAndDirty(name, fieldValue, isCurrentTouched) {\n    var shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var isFieldDirty = false;\n    var output = {\n      name: name\n    };\n    var isPreviousFieldTouched = get(_formState.touchedFields, name);\n    if (_proxyFormState.isDirty) {\n      var isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      var isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      var isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n  var updateFieldArrayDirty = function updateFieldArrayDirty(name, value) {\n    return set(_formState.dirtyFields, name, setFieldArrayDirtyFields(value, get(_defaultValues, name, []), get(_formState.dirtyFields, name, []))), unsetEmptyArray(_formState.dirtyFields, name);\n  };\n  var shouldRenderByError = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(shouldSkipRender, name, isValid, error, fieldState) {\n      var previousFieldError, shouldUpdateValid, updatedFormState;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            previousFieldError = get(_formState.errors, name);\n            shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n            if (props.delayError && error) {\n              delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n              delayErrorCallback(name, error);\n            } else {\n              clearTimeout(timer);\n              error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n            }\n            if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n              updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n                isValid: isValid\n              } : {}), {\n                errors: _formState.errors,\n                name: name\n              });\n              _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n              _subjects.state.next(updatedFormState);\n            }\n            validateFields[name]--;\n            if (_proxyFormState.isValidating && !validateFields[name]) {\n              _subjects.state.next({\n                isValidating: false\n              });\n              validateFields = {};\n            }\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function shouldRenderByError(_x6, _x7, _x8, _x9, _x10) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n  var _executeSchema = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(name) {\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!_options.resolver) {\n              _context4.next = 6;\n              break;\n            }\n            _context4.next = 3;\n            return _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n          case 3:\n            _context4.t0 = _context4.sent;\n            _context4.next = 7;\n            break;\n          case 6:\n            _context4.t0 = {};\n          case 7:\n            return _context4.abrupt(\"return\", _context4.t0);\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return function _executeSchema(_x11) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n  var executeSchemaAndUpdateState = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(names) {\n      var _yield$_executeSchema, errors, _iterator6, _step6, _name2, _error;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _executeSchema();\n          case 2:\n            _yield$_executeSchema = _context5.sent;\n            errors = _yield$_executeSchema.errors;\n            if (names) {\n              _iterator6 = _createForOfIteratorHelper(names);\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  _name2 = _step6.value;\n                  _error = get(errors, _name2);\n                  _error ? set(_formState.errors, _name2, _error) : unset(_formState.errors, _name2);\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n            } else {\n              _formState.errors = errors;\n            }\n            return _context5.abrupt(\"return\", errors);\n          case 6:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return function executeSchemaAndUpdateState(_x12) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n  var executeBuildInValidation = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(fields, shouldOnlyCheckValid) {\n      var context,\n        _name3,\n        field,\n        fieldReference,\n        fieldValue,\n        fieldError,\n        _args6 = arguments;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            context = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {\n              valid: true\n            };\n            _context6.t0 = _regeneratorRuntime().keys(fields);\n          case 2:\n            if ((_context6.t1 = _context6.t0()).done) {\n              _context6.next = 23;\n              break;\n            }\n            _name3 = _context6.t1.value;\n            field = fields[_name3];\n            if (!field) {\n              _context6.next = 21;\n              break;\n            }\n            fieldReference = field._f;\n            fieldValue = omit(field, '_f');\n            if (!fieldReference) {\n              _context6.next = 17;\n              break;\n            }\n            _context6.next = 11;\n            return validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n          case 11:\n            fieldError = _context6.sent;\n            if (!fieldError[fieldReference.name]) {\n              _context6.next = 16;\n              break;\n            }\n            context.valid = false;\n            if (!shouldOnlyCheckValid) {\n              _context6.next = 16;\n              break;\n            }\n            return _context6.abrupt(\"break\", 23);\n          case 16:\n            if (!shouldOnlyCheckValid) {\n              fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n            }\n          case 17:\n            _context6.t2 = fieldValue;\n            if (!_context6.t2) {\n              _context6.next = 21;\n              break;\n            }\n            _context6.next = 21;\n            return executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context);\n          case 21:\n            _context6.next = 2;\n            break;\n          case 23:\n            return _context6.abrupt(\"return\", context.valid);\n          case 24:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return function executeBuildInValidation(_x13, _x14) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n  var _removeUnmounted = function _removeUnmounted() {\n    var _iterator7 = _createForOfIteratorHelper(_names.unMount),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var _name4 = _step7.value;\n        var field = get(_fields, _name4);\n        field && (field._f.refs ? field._f.refs.every(function (ref) {\n          return !live(ref);\n        }) : !live(field._f.ref)) && unregister(_name4);\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n    _names.unMount = new Set();\n  };\n  var _getDirty = function _getDirty(name, data) {\n    return name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues);\n  };\n  var _getWatch = function _getWatch(names, defaultValue, isGlobal) {\n    var fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? _defineProperty({}, names, defaultValue) : defaultValue);\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n  var _getFieldArray = function _getFieldArray(name) {\n    return get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\n  };\n  var setFieldValue = function setFieldValue(name, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var field = get(_fields, name);\n    var fieldValue = value;\n    if (field) {\n      var fieldReference = field._f;\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          _toConsumableArray(fieldReference.ref.options).forEach(function (selectRef) {\n            return selectRef.selected = fieldValue.includes(selectRef.value);\n          });\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(function (checkboxRef) {\n              return checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(function (data) {\n                return data === checkboxRef.value;\n              }) : fieldValue === checkboxRef.value;\n            }) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(function (radioRef) {\n              return radioRef.checked = radioRef.value === fieldValue;\n            });\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n  var setValues = function setValues(name, value, options) {\n    for (var fieldKey in value) {\n      var fieldValue = value[fieldKey];\n      var fieldName = \"\".concat(name, \".\").concat(fieldKey);\n      var field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n  var setValue = function setValue(name, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var field = get(_fields, name);\n    var isFieldArray = _names.array.has(name);\n    set(_formValues, name, value);\n    if (isFieldArray) {\n      _subjects.array.next({\n        name: name,\n        values: _formValues\n      });\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        updateFieldArrayDirty(name, value);\n        _subjects.state.next({\n          name: name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options);\n    }\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name: name\n    });\n  };\n  var handleChange = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(event) {\n      var target, name, field, _error2, isValid, fieldValue, isBlurEvent, shouldSkipValidation, isWatched, fieldState, shouldRender, _yield$_executeSchema2, errors, previousErrorLookupResult, errorLookupResult;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            target = event.target;\n            name = target.name;\n            field = get(_fields, name);\n            if (!field) {\n              _context7.next = 39;\n              break;\n            }\n            fieldValue = target.type ? getFieldValue(field._f) : target.value;\n            isBlurEvent = event.type === EVENTS.BLUR;\n            shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            isWatched = isFieldWatched(name, isBlurEvent);\n            if (isBlurEvent) {\n              field._f.onBlur && field._f.onBlur(event);\n            } else if (field._f.onChange) {\n              field._f.onChange(event);\n            }\n            set(_formValues, name, fieldValue);\n            fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            shouldRender = !isEmptyObject(fieldState) || isWatched;\n            !isBlurEvent && _subjects.watch.next({\n              name: name,\n              type: event.type\n            });\n            if (!shouldSkipValidation) {\n              _context7.next = 15;\n              break;\n            }\n            return _context7.abrupt(\"return\", shouldRender && _subjects.state.next(Object.assign({\n              name: name\n            }, isWatched ? {} : fieldState)));\n          case 15:\n            !isBlurEvent && isWatched && _subjects.state.next({});\n            validateFields[name] = validateFields[name] ? +1 : 1;\n            _proxyFormState.isValidating && _subjects.state.next({\n              isValidating: true\n            });\n            if (!_options.resolver) {\n              _context7.next = 30;\n              break;\n            }\n            _context7.next = 21;\n            return _executeSchema([name]);\n          case 21:\n            _yield$_executeSchema2 = _context7.sent;\n            errors = _yield$_executeSchema2.errors;\n            previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n            errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n            _error2 = errorLookupResult.error;\n            name = errorLookupResult.name;\n            isValid = isEmptyObject(errors);\n            _context7.next = 37;\n            break;\n          case 30:\n            _context7.next = 32;\n            return validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n          case 32:\n            _context7.t0 = name;\n            _error2 = _context7.sent[_context7.t0];\n            _context7.next = 36;\n            return _updateValid(true);\n          case 36:\n            isValid = _context7.sent;\n          case 37:\n            field._f.deps && trigger(field._f.deps);\n            shouldRenderByError(false, name, isValid, _error2, fieldState);\n          case 39:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return function handleChange(_x15) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n  var trigger = /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(name) {\n      var options,\n        isValid,\n        validationResult,\n        fieldNames,\n        errors,\n        _args9 = arguments;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n            fieldNames = convertToArrayPayload(name);\n            _subjects.state.next({\n              isValidating: true\n            });\n            if (!_options.resolver) {\n              _context9.next = 11;\n              break;\n            }\n            _context9.next = 6;\n            return executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n          case 6:\n            errors = _context9.sent;\n            isValid = isEmptyObject(errors);\n            validationResult = name ? !fieldNames.some(function (name) {\n              return get(errors, name);\n            }) : isValid;\n            _context9.next = 21;\n            break;\n          case 11:\n            if (!name) {\n              _context9.next = 18;\n              break;\n            }\n            _context9.next = 14;\n            return Promise.all(fieldNames.map( /*#__PURE__*/function () {\n              var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(fieldName) {\n                var field;\n                return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                  while (1) switch (_context8.prev = _context8.next) {\n                    case 0:\n                      field = get(_fields, fieldName);\n                      _context8.next = 3;\n                      return executeBuildInValidation(field && field._f ? _defineProperty({}, fieldName, field) : field);\n                    case 3:\n                      return _context8.abrupt(\"return\", _context8.sent);\n                    case 4:\n                    case \"end\":\n                      return _context8.stop();\n                  }\n                }, _callee8);\n              }));\n              return function (_x17) {\n                return _ref19.apply(this, arguments);\n              };\n            }()));\n          case 14:\n            validationResult = _context9.sent.every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n            _context9.next = 21;\n            break;\n          case 18:\n            _context9.next = 20;\n            return executeBuildInValidation(_fields);\n          case 20:\n            validationResult = isValid = _context9.sent;\n          case 21:\n            _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n              name: name\n            }), _options.resolver ? {\n              isValid: isValid\n            } : {}), {\n              errors: _formState.errors,\n              isValidating: false\n            }));\n            options.shouldFocus && !validationResult && focusFieldBy(_fields, function (key) {\n              return get(_formState.errors, key);\n            }, name ? fieldNames : _names.mount);\n            return _context9.abrupt(\"return\", validationResult);\n          case 24:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return function trigger(_x16) {\n      return _ref18.apply(this, arguments);\n    };\n  }();\n  var getValues = function getValues(fieldNames) {\n    var values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(function (name) {\n      return get(values, name);\n    });\n  };\n  var clearErrors = function clearErrors(name) {\n    name ? convertToArrayPayload(name).forEach(function (inputName) {\n      return unset(_formState.errors, inputName);\n    }) : _formState.errors = {};\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true\n    });\n  };\n  var setError = function setError(name, error, options) {\n    var ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref: ref\n    }));\n    _subjects.state.next({\n      name: name,\n      errors: _formState.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  var watch = function watch(name, defaultValue) {\n    return isFunction(name) ? _subjects.watch.subscribe({\n      next: function next(info) {\n        return name(_getWatch(undefined, defaultValue), info);\n      }\n    }) : _getWatch(name, defaultValue, true);\n  };\n  var unregister = function unregister(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _iterator8 = _createForOfIteratorHelper(name ? convertToArrayPayload(name) : _names.mount),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var fieldName = _step8.value;\n        _names.mount.delete(fieldName);\n        _names.array.delete(fieldName);\n        if (get(_fields, fieldName)) {\n          if (!options.keepValue) {\n            unset(_fields, fieldName);\n            unset(_formValues, fieldName);\n          }\n          !options.keepError && unset(_formState.errors, fieldName);\n          !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n          !options.keepTouched && unset(_formState.touchedFields, fieldName);\n          !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n        }\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    _subjects.watch.next({});\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n    !options.keepIsValid && _updateValid();\n  };\n  var register = function register(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name: name\n        }\n      }), {\n        name: name,\n        mount: true\n      }), options)\n    });\n    _names.mount.add(name);\n    !isUndefined(options.value) && !options.disabled && set(_formValues, name, get(_formValues, name, options.value));\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return isWindowUndefined ? {\n      name: name\n    } : Object.assign(Object.assign({\n      name: name\n    }, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), {\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: function (_ref21) {\n        function ref(_x18) {\n          return _ref21.apply(this, arguments);\n        }\n        ref.toString = function () {\n          return _ref21.toString();\n        };\n        return ref;\n      }(function (ref) {\n        if (ref) {\n          register(name, options);\n          var _field = get(_fields, name);\n          var fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          var isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n          if (fieldRef === _field._f.ref || isRadioOrCheckbox && compact(_field._f.refs || []).find(function (option) {\n            return option === fieldRef;\n          })) {\n            return;\n          }\n          _field = {\n            _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, _field._f), {\n              refs: [].concat(_toConsumableArray(compact(_field._f.refs || []).filter(live)), [fieldRef]),\n              ref: {\n                type: fieldRef.type,\n                name: name\n              }\n            }) : Object.assign(Object.assign({}, _field._f), {\n              ref: fieldRef\n            })\n          };\n          set(_fields, name, _field);\n          (!options || !options.disabled) && updateValidAndValue(name, false, fieldRef);\n        } else {\n          var _field2 = get(_fields, name, {});\n          var shouldUnregister = _options.shouldUnregister || options.shouldUnregister;\n          if (_field2._f) {\n            _field2._f.mount = false;\n          }\n          shouldUnregister && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      })\n    });\n  };\n  var handleSubmit = function handleSubmit(onValid, onInvalid) {\n    return /*#__PURE__*/function () {\n      var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(e) {\n        var hasNoPromiseError, fieldValues, _yield$_executeSchema3, errors, values;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (e) {\n                e.preventDefault && e.preventDefault();\n                e.persist && e.persist();\n              }\n              hasNoPromiseError = true;\n              fieldValues = _options.shouldUnregister ? cloneObject(_formValues) : Object.assign({}, _formValues);\n              _subjects.state.next({\n                isSubmitting: true\n              });\n              _context10.prev = 4;\n              if (!_options.resolver) {\n                _context10.next = 15;\n                break;\n              }\n              _context10.next = 8;\n              return _executeSchema();\n            case 8:\n              _yield$_executeSchema3 = _context10.sent;\n              errors = _yield$_executeSchema3.errors;\n              values = _yield$_executeSchema3.values;\n              _formState.errors = errors;\n              fieldValues = values;\n              _context10.next = 17;\n              break;\n            case 15:\n              _context10.next = 17;\n              return executeBuildInValidation(_fields);\n            case 17:\n              if (!(isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(function (name) {\n                return get(fieldValues, name);\n              }))) {\n                _context10.next = 23;\n                break;\n              }\n              _subjects.state.next({\n                errors: {},\n                isSubmitting: true\n              });\n              _context10.next = 21;\n              return onValid(fieldValues, e);\n            case 21:\n              _context10.next = 28;\n              break;\n            case 23:\n              _context10.t0 = onInvalid;\n              if (!_context10.t0) {\n                _context10.next = 27;\n                break;\n              }\n              _context10.next = 27;\n              return onInvalid(_formState.errors, e);\n            case 27:\n              _options.shouldFocusError && focusFieldBy(_fields, function (key) {\n                return get(_formState.errors, key);\n              }, _names.mount);\n            case 28:\n              _context10.next = 34;\n              break;\n            case 30:\n              _context10.prev = 30;\n              _context10.t1 = _context10[\"catch\"](4);\n              hasNoPromiseError = false;\n              throw _context10.t1;\n            case 34:\n              _context10.prev = 34;\n              _formState.isSubmitted = true;\n              _subjects.state.next({\n                isSubmitted: true,\n                isSubmitting: false,\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n                submitCount: _formState.submitCount + 1,\n                errors: _formState.errors\n              });\n              return _context10.finish(34);\n            case 38:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, null, [[4, 30, 34, 38]]);\n      }));\n      return function (_x19) {\n        return _ref22.apply(this, arguments);\n      };\n    }();\n  };\n  var resetField = function resetField(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue ? _getDirty(name, get(_defaultValues, name)) : _getDirty();\n    }\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n    _subjects.state.next(Object.assign({}, _formState));\n  };\n  var reset = function reset(formValues) {\n    var keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var updatedValues = formValues || _defaultValues;\n    var cloneUpdatedValues = cloneObject(updatedValues);\n    var values = !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        var _iterator9 = _createForOfIteratorHelper(_names.mount),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var _name5 = _step9.value;\n            var field = get(_fields, _name5);\n            if (field && field._f) {\n              var fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n              try {\n                isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n                break;\n              } catch (_a) {}\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      }\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n      _subjects.watch.next({\n        values: values\n      });\n      _subjects.array.next({\n        values: values\n      });\n    }\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce(function (previous, _ref23) {\n        var _ref24 = _slicedToArray(_ref23, 2),\n          key = _ref24[0],\n          value = _ref24[1];\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, key, value !== get(_defaultValues, key)));\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n  var setFocus = function setFocus(name) {\n    var field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n  return {\n    control: {\n      register: register,\n      unregister: unregister,\n      _executeSchema: _executeSchema,\n      _getWatch: _getWatch,\n      _getDirty: _getDirty,\n      _updateValid: _updateValid,\n      _removeUnmounted: _removeUnmounted,\n      _updateFieldArray: _updateFieldArray,\n      _getFieldArray: _getFieldArray,\n      _subjects: _subjects,\n      _proxyFormState: _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n    },\n    trigger: trigger,\n    register: register,\n    handleSubmit: handleSubmit,\n    watch: watch,\n    setValue: setValue,\n    getValues: getValues,\n    reset: reset,\n    resetField: resetField,\n    clearErrors: clearErrors,\n    unregister: unregister,\n    setError: setError,\n    setFocus: setFocus\n  };\n}\nfunction useForm() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _formControl = React.useRef();\n  var _React$useState7 = React.useState({\n      isDirty: false,\n      isValidating: false,\n      dirtyFields: {},\n      isSubmitted: false,\n      submitCount: 0,\n      touchedFields: {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false,\n      errors: {}\n    }),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    formState = _React$useState8[0],\n    updateFormState = _React$useState8[1];\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState: formState\n    });\n  }\n  var control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: function callback(formState) {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), formState);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(function () {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"mappings":";;;;;;;AAEA,sBAAe,SAAfA,gBAAgBC,OAAqB;EAAA,OACnCA,OAAO,CAACC,IAAI,KAAK,UAAU;AAAA;ACH7B,mBAAe,SAAfC,aAAgBC,IAAa;EAAA,OAAKA,IAAI,YAAYC,IAAI;AAAA;ACAtD,wBAAe,SAAfC,kBAAgBC,KAAc;EAAA,OAAgCA,KAAK,IAAI,IAAI;AAAA;ACGpE,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAID,KAAc;EAAA,OAAK,OAAOA,KAAK,KAAK,QAAQ;AAAA;AAEzE,eAAe,SAAfE,SAAkCF,KAAc;EAAA,OAC9C,CAACD,iBAAiB,CAACC,KAAK,CAAC,IACzB,CAACG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,IACrBC,YAAY,CAACD,KAAK,CAAC,IACnB,CAACJ,YAAY,CAACI,KAAK,CAAC;AAAA;ACJtB,yBAAe,SAAfK,mBAAgBC,KAAc;EAAA,OAC5BJ,QAAQ,CAACI,KAAK,CAAC,IAAKA,KAAe,CAACC,MAAM,GACtCd,eAAe,CAAEa,KAAe,CAACC,MAAM,CAAC,GACrCD,KAAe,CAACC,MAAM,CAACC,OAAO,GAC9BF,KAAe,CAACC,MAAM,CAACP,KAAK,GAC/BM,KAAK;AAAA;ACVX,wBAAe,SAAfG,kBAAgBC,IAAY;EAAA,OAAKA,IAAI,CAACC,SAAS,CAAC,CAAC,EAAED,IAAI,CAACE,MAAM,CAAC,KAAK,CAAC,CAAC,IAAIF,IAAI;AAAA;ACI9E,yBAAe,SAAfG,mBAAgBC,KAA6B,EAAEJ,IAAuB;EAAA,OACpE,mBAAII,KAAK,EAAEC,IAAI,CAAC,UAACC,OAAO;IAAA,OAAKP,iBAAiB,CAACC,IAAI,CAAC,KAAKM,OAAO;EAAA,EAAC;AAAA;ACLnE,cAAe,SAAfC,QAAgBjB,KAAY;EAAA,OAAKA,KAAK,CAACkB,MAAM,CAACC,OAAO,CAAC;AAAA;ACAtD,kBAAe,SAAfC,YAAgBC,GAAY;EAAA,OAAuBA,GAAG,KAAKC,SAAS;AAAA;ACKpE,UAAe,SAAfC,IAAmBC,GAAM,EAAEC,IAAY,EAAEC,YAAsB;EAC7D,IAAIxB,QAAQ,CAACsB,GAAG,CAAC,IAAIC,IAAI,EAAE;IACzB,IAAME,MAAM,GAAGV,OAAO,CAACQ,IAAI,CAACG,KAAK,CAAC,WAAW,CAAC,CAAC,CAACC,MAAM,CACpD,UAACF,MAAM,EAAEG,GAAG;MAAA,OAAM/B,iBAAiB,CAAC4B,MAAM,CAAC,GAAGA,MAAM,GAAGA,MAAM,CAACG,GAAG,CAAC;IAAA,CAAC,EACnEN,GAAG,CACJ;IAED,OAAOJ,WAAW,CAACO,MAAM,CAAC,IAAIA,MAAM,KAAKH,GAAG,GACxCJ,WAAW,CAACI,GAAG,CAACC,IAAe,CAAC,CAAC,GAC/BC,YAAY,GACZF,GAAG,CAACC,IAAe,CAAC,GACtBE,MAAM;;EAGZ,OAAOL,SAAS;AAClB,CAAC;AClBM,IAAMS,MAAM,GAAG;EACpBC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE;CACT;AAEM,IAAMC,eAAe,GAAmB;EAC7CC,MAAM,EAAE,QAAQ;EAChBC,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE,UAAU;EACpBC,SAAS,EAAE,WAAW;EACtBC,GAAG,EAAE;CACN;AAEM,IAAMC,sBAAsB,GAAG;EACpCC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE,KAAK;EACVC,SAAS,EAAE,WAAW;EACtBC,SAAS,EAAE,WAAW;EACtBC,OAAO,EAAE,SAAS;EAClBC,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE;CACX;ACvBD,WAAe,SAAfC,KACEC,MAAS,EACTnB,GAAQ;EAER,IAAMoB,IAAI,qBAAQD,MAAM,CAAE;EAC1B,OAAOC,IAAI,CAACpB,GAAG,CAAC;EAEhB,OAAOoB,IAAI;AACb,CAAC;ACHD,IAAMC,eAAe,GAAGC,KAAK,CAACC,aAAa,CAAuB,IAAI,CAAC;IAE1DC,cAAc,GAAG,SAAjBA,cAAc;EAAA,OAGzBF,KAAK,CAACG,UAAU,CAACJ,eAAe;AAAA;IAErBK,YAAY,GAAG,SAAfA,YAAY,CAIvBC,KAAgD;EAAA,OAEhDL,oBAACD,eAAe,CAACO,QAAQ;IACvB1D,KAAK,EAAEgD,IAAI,CAACS,KAAK,EAAE,UAAU;EAA6B,GAEzDA,KAAK,CAACE,QAAQ,CACU;AAAA;ACnB7B,wBAAe,SAAfC,kBACEC,SAAkC,EAClCC,eAA8B,EAC9BC,mBAAmC,EACtB;EAAA,IAAbC,MAAM,uEAAG,IAAI;EAEb,SAASC,YAAY,CAACC,IAA0B;IAC9C,OAAO;MACL,IAAIA,IAAI,IAAIL,SAAS,EAAE;QACrB,IAAIC,eAAe,CAACI,IAAI,CAAC,KAAKhC,eAAe,CAACK,GAAG,EAAE;UACjDuB,eAAe,CAACI,IAAI,CAAC,GAAG,CAACF,MAAM,IAAI9B,eAAe,CAACK,GAAG;;QAExDwB,mBAAmB,KAAKA,mBAAmB,CAACG,IAAI,CAAC,GAAG,IAAI,CAAC;QACzD,OAAOL,SAAS,CAACK,IAAI,CAAC;;MAExB,OAAO5C,SAAS;KACjB;;EAGH,IAAMK,MAAM,GAAG,EAA6B;EAC5C,KAAK,IAAMG,GAAG,IAAI+B,SAAS,EAAE;IAC3BM,MAAM,CAACC,cAAc,CAACzC,MAAM,EAAEG,GAAG,EAAE;MACjCP,GAAG,EAAE0C,YAAY,CAACnC,GAA2B;KAC9C,CAAC;;EAGJ,OAAOH,MAAM;AACf,CAAC;AC1BD,oBAAe,SAAf0C,cAAgBrE,KAAc;EAAA,OAC5BE,QAAQ,CAACF,KAAK,CAAC,IAAI,CAACmE,MAAM,CAACG,IAAI,CAACtE,KAAK,CAAC,CAACuE,MAAM;AAAA;ACA/C,4BAAe,SAAfC,sBACEC,aAAgB,EAChBX,eAAkB,EAClBE,MAAgB;EAEhB,IAAMH,SAAS,GAAGb,IAAI,CAACyB,aAAa,EAAE,MAAM,CAAC;EAE7C,OACEJ,aAAa,CAACR,SAAS,CAAC,IACxBM,MAAM,CAACG,IAAI,CAACT,SAAS,CAAC,CAACU,MAAM,IAAIJ,MAAM,CAACG,IAAI,CAACR,eAAe,CAAC,CAACS,MAAM,IACpEJ,MAAM,CAACG,IAAI,CAACT,SAAS,CAAC,CAACa,IAAI,CACzB,UAAC5C,GAAG;IAAA,OACFgC,eAAe,CAAChC,GAA0B,CAAC,MAC1C,CAACkC,MAAM,IAAI9B,eAAe,CAACK,GAAG,CAAC;EAAA,EACnC;AAEL,CAAC;ACrBD,4BAAe,SAAfoC,sBAAmB3E,KAAQ;EAAA,OAAMG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;AAAA,CAAC;ACExE,4BAAe,SAAf4E,sBACElE,IAAQ,EACRmE,UAAmB;EAAA,OAEnB,CAACnE,IAAI,IACL,CAACmE,UAAU,IACXnE,IAAI,KAAKmE,UAAU,IACnBF,qBAAqB,CAACjE,IAAI,CAAC,CAACK,IAAI,CAC9B,UAAC+D,WAAW;IAAA,OACVA,WAAW,KACVA,WAAW,CAACC,UAAU,CAACF,UAAU,CAAC,IACjCA,UAAU,CAACE,UAAU,CAACD,WAAW,CAAC,CAAC;EAAA,EACxC;AAAA;ACCH,IAAME,QAAQ,GAAG,SAAXA,QAAQ,CACZC,aAA+D;EAE/D,IAAIA,aAAa,CAACjE,OAAO,EAAE;IACzBiE,aAAa,CAACjE,OAAO,CAACkE,WAAW,EAAE;IACnCD,aAAa,CAACjE,OAAO,GAAGM,SAAS;;AAErC,CAAC;AAED,IAAM6D,uBAAuB,GAAG,SAA1BA,uBAAuB,OAA4C;EAAA,IAAnCF,aAAa,QAAbA,aAAa;IAAEG,MAAM,QAANA,MAAM;EACzD,IAAIA,MAAM,CAACpE,OAAO,CAACqE,QAAQ,EAAE;IAC3BL,QAAQ,CAACC,aAAa,CAAC;GACxB,MAAM,IAAI,CAACA,aAAa,CAACjE,OAAO,EAAE;IACjCiE,aAAa,CAACjE,OAAO,GAAGoE,MAAM,CAACpE,OAAO,CAACsE,OAAO,CAACC,SAAS,CAAC;MACvDC,IAAI,EAAEJ,MAAM,CAACpE,OAAO,CAACyE;KACtB,CAAC;;AAEN,CAAC;SAEeC,YAAY,CAAIjC,KAAe;EAC7C,IAAMwB,aAAa,GAAG7B,KAAK,CAACuC,MAAM,EAAgB;EAClD,IAAMP,MAAM,GAAGhC,KAAK,CAACuC,MAAM,CAAClC,KAAK,CAAC;EAClC2B,MAAM,CAACpE,OAAO,GAAGyC,KAAK;EAEtB0B,uBAAuB,CAAC;IACtBF,aAAa,EAAbA,aAAa;IACbG,MAAM,EAANA;GACD,CAAC;EAEFhC,KAAK,CAACwC,SAAS,CAAC;IACdT,uBAAuB,CAAC;MACtBF,aAAa,EAAbA,aAAa;MACbG,MAAM,EAANA;KACD,CAAC;IAEF,OAAO;MAAA,OAAMJ,QAAQ,CAACC,aAAa,CAAC;IAAA;GACrC,EAAE,EAAE,CAAC;AACR;ACtCA,SAASY,YAAY,CACnBpC,KAAuC;EAEvC,IAAMqC,OAAO,GAAGxC,cAAc,EAAgB;EAC9C,YAAsDG,KAAK,IAAI,EAAE;IAAA,sBAAzDsC,OAAO;IAAPA,OAAO,8BAAGD,OAAO,CAACC,OAAO;IAAEV,QAAQ,SAARA,QAAQ;IAAE3E,IAAI,SAAJA,IAAI;EACjD,sBAAqC0C,KAAK,CAAC4C,QAAQ,CAACD,OAAO,CAACE,UAAU,CAAC;IAAA;IAAhEpC,SAAS;IAAEqC,eAAe;EACjC,IAAMC,oBAAoB,GAAG/C,KAAK,CAACuC,MAAM,CAAC;IACxCS,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE,KAAK;IAClBC,aAAa,EAAE,KAAK;IACpBC,YAAY,EAAE,KAAK;IACnBC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;GACT,CAAC;EACF,IAAMC,KAAK,GAAGtD,KAAK,CAACuC,MAAM,CAACjF,IAAI,CAAC;EAEhCgG,KAAK,CAAC1F,OAAO,GAAGN,IAAI;EAEpBgF,YAAY,CAAC;IACXL,QAAQ,EAARA,QAAQ;IACRI,QAAQ,EAAE,kBAAC5B,SAAS;MAAA,OAClBe,qBAAqB,CACnB8B,KAAK,CAAC1F,OAA4B,EAClC6C,SAAS,CAACnD,IAAI,CACf,IACD8D,qBAAqB,CAACX,SAAS,EAAEsC,oBAAoB,CAACnF,OAAO,CAAC,IAC9DkF,eAAe,iCACVH,OAAO,CAACE,UAAU,GAClBpC,SAAS,EACZ;IAAA;IACJyB,OAAO,EAAES,OAAO,CAACY,SAAS,CAACC;GAC5B,CAAC;EAEF,OAAOhD,iBAAiB,CACtBC,SAAS,EACTkC,OAAO,CAACjC,eAAe,EACvBqC,oBAAoB,CAACnF,OAAO,EAC5B,KAAK,CACN;AACH;ACrDA,eAAe,SAAf6F,SAAgB7G,KAAc;EAAA,OAAsB,OAAOA,KAAK,KAAK,QAAQ;AAAA;SCI7D8G,mBAAmB,CACjChG,KAAoC,EACpCiG,MAAa,EACbC,UAAwB,EACxBC,QAAkB;EAElB,IAAM7G,OAAO,GAAGD,KAAK,CAACC,OAAO,CAACU,KAAK,CAAC;EACpC,IAAI+F,QAAQ,CAAC/F,KAAK,CAAC,EAAE;IACnBmG,QAAQ,IAAIF,MAAM,CAACG,KAAK,CAACC,GAAG,CAACrG,KAA0B,CAAC;IACxD,OAAOS,GAAG,CAACyF,UAAU,EAAElG,KAA0B,CAAC;;EAGpD,IAAIV,OAAO,EAAE;IACX,OAAOU,KAAK,CAACsG,GAAG,CACd,UAACC,SAAS;MAAA,OACRJ,QAAQ,IAAIF,MAAM,CAACG,KAAK,CAACC,GAAG,CAACE,SAA8B,CAAC,EAC5D9F,GAAG,CAACyF,UAAU,EAAEK,SAA8B,CAAC;IAAA,CAChD,CACF;;EAGHJ,QAAQ,KAAKF,MAAM,CAACO,QAAQ,GAAG,IAAI,CAAC;EACpC,OAAON,UAAU;AACnB;SCqBgBO,QAAQ,CAAe9D,KAAmC;EACxE,IAAMqC,OAAO,GAAGxC,cAAc,EAAE;EAChC,YAKIG,KAAK,IAAI,EAAE;IAAA,sBAJbsC,OAAO;IAAPA,OAAO,8BAAGD,OAAO,CAACC,OAAO;IACzBrF,IAAI,SAAJA,IAAI;IACJgB,YAAY,SAAZA,YAAY;IACZ2D,QAAQ,SAARA,QAAQ;EAEV,IAAMqB,KAAK,GAAGtD,KAAK,CAACuC,MAAM,CAACjF,IAAI,CAAC;EAEhCgG,KAAK,CAAC1F,OAAO,GAAGN,IAAI;EAEpBgF,YAAY,CAAC;IACXL,QAAQ,EAARA,QAAQ;IACRC,OAAO,EAAES,OAAO,CAACY,SAAS,CAACO,KAAK;IAChCzB,QAAQ,EAAE,kBAAC5B,SAAS;MAClB,IACEe,qBAAqB,CACnB8B,KAAK,CAAC1F,OAA4B,EAClC6C,SAAS,CAACnD,IAAI,CACf,EACD;QACA,IAAM8G,WAAW,GAAGV,mBAAmB,CACrCJ,KAAK,CAAC1F,OAAkD,EACxD+E,OAAO,CAACgB,MAAM,EACdlD,SAAS,CAAC4D,MAAM,IAAI1B,OAAO,CAAC2B,WAAW,CACxC;QAEDC,WAAW,CACTvG,WAAW,CAACsF,KAAK,CAAC1F,OAAO,CAAC,qBACjBwG,WAAW,IAChBrH,KAAK,CAACC,OAAO,CAACoH,WAAW,CAAC,sBACtBA,WAAW,IACfA,WAAW,CAChB;;;GAGN,CAAC;EAEF,uBAA6BpE,KAAK,CAAC4C,QAAQ,CACzC5E,WAAW,CAACM,YAAY,CAAC,GACrBqE,OAAO,CAAC6B,SAAS,CAAClH,IAAyB,CAAC,GAC5CgB,YAAY,CACjB;IAAA;IAJM1B,KAAK;IAAE2H,WAAW;EAMzBvE,KAAK,CAACwC,SAAS,CAAC;IACdG,OAAO,CAAC8B,gBAAgB,EAAE;GAC3B,CAAC;EAEF,OAAO7H,KAAK;AACd;SChFgB8H,aAAa,CAI3BrE,KAA8C;EAE9C,IAAMqC,OAAO,GAAGxC,cAAc,EAAgB;EAC9C,IAAQ5C,IAAI,GAAkD+C,KAAK,CAA3D/C,IAAI;IAAA,iBAAkD+C,KAAK,CAArDsC,OAAO;IAAPA,OAAO,+BAAGD,OAAO,CAACC,OAAO;IAAEgC,gBAAgB,GAAKtE,KAAK,CAA1BsE,gBAAgB;EACzD,IAAM/H,KAAK,GAAGuH,QAAQ,CAAC;IACrBxB,OAAO,EAAPA,OAAO;IACPrF,IAAI,EAAJA,IAAI;IACJgB,YAAY,EAAEH,GAAG,CACfwE,OAAO,CAAC2B,WAAW,EACnBhH,IAAI,EACJa,GAAG,CAACwE,OAAO,CAACiC,cAAc,EAAEtH,IAAI,EAAE+C,KAAK,CAAC/B,YAAY,CAAC;GAExD,CAAC;EACF,IAAMmC,SAAS,GAAGgC,YAAY,CAAC;IAC7BE,OAAO,EAAPA,OAAO;IACPrF,IAAI,EAAJA;GACD,CAAC;EACF,IAAMgG,KAAK,GAAGtD,KAAK,CAACuC,MAAM,CAACjF,IAAI,CAAC;EAEhCgG,KAAK,CAAC1F,OAAO,GAAGN,IAAI;EAEpB,IAAMuH,aAAa,GAAGlC,OAAO,CAACmC,QAAQ,CAACxH,IAAI,kCACtC+C,KAAK,CAAC0E,KAAK;IACdnI,KAAK,EAALA;EAAK,GACL;EAEFoD,KAAK,CAACwC,SAAS,CAAC;IACd,IAAMwC,aAAa,GAAG,SAAhBA,aAAa,CAAI1H,IAAuB,EAAEV,KAAc;MAC5D,IAAMqI,KAAK,GAAU9G,GAAG,CAACwE,OAAO,CAACuC,OAAO,EAAE5H,IAAI,CAAC;MAE/C,IAAI2H,KAAK,EAAE;QACTA,KAAK,CAACE,EAAE,CAACC,KAAK,GAAGxI,KAAK;;KAEzB;IAEDoI,aAAa,CAAC1H,IAAI,EAAE,IAAI,CAAC;IAEzB,OAAO;MACL,IAAM+H,sBAAsB,GAC1B1C,OAAO,CAAC2C,QAAQ,CAACX,gBAAgB,IAAIA,gBAAgB;MAEvD,IACElH,kBAAkB,CAACkF,OAAO,CAACgB,MAAM,CAAC4B,KAAK,EAAEjI,IAAI,CAAC,GAC1C+H,sBAAsB,IAAI,CAAC1C,OAAO,CAAC6C,WAAW,CAACC,MAAM,GACrDJ,sBAAsB,EAC1B;QACA1C,OAAO,CAAC+C,UAAU,CAACpI,IAAI,EAAE;UAAEqI,gBAAgB,EAAE;QAAI,CAAE,CAAC;OACrD,MAAM;QACLX,aAAa,CAAC1H,IAAI,EAAE,KAAK,CAAC;;KAE7B;GACF,EAAE,CAACA,IAAI,EAAEqF,OAAO,EAAEgC,gBAAgB,CAAC,CAAC;EAErC,OAAO;IACLM,KAAK,EAAE;MACLjG,QAAQ,EAAE,kBAAC9B,KAAK;QACd2H,aAAa,CAAC7F,QAAQ,CAAC;UACrB7B,MAAM,EAAE;YACNP,KAAK,EAAEK,kBAAkB,CAACC,KAAK,CAAC;YAChCI,IAAI,EAAEA;WACP;UACDf,IAAI,EAAEoC,MAAM,CAACE;SACd,CAAC;OACH;MACDE,MAAM,EAAE;QACN8F,aAAa,CAAC9F,MAAM,CAAC;UACnB5B,MAAM,EAAE;YACNP,KAAK,EAALA,KAAK;YACLU,IAAI,EAAEA;WACP;UACDf,IAAI,EAAEoC,MAAM,CAACC;SACd,CAAC;OACH;MACDtB,IAAI,EAAJA,IAAI;MACJV,KAAK,EAALA,KAAK;MACLgJ,GAAG,EAAE,aAACC,GAAG;QACP,IAAMZ,KAAK,GAAG9G,GAAG,CAACwE,OAAO,CAACuC,OAAO,EAAE5H,IAAI,CAAC;QAExC,IAAIuI,GAAG,IAAIZ,KAAK,IAAIY,GAAG,CAACC,KAAK,EAAE;UAC7Bb,KAAK,CAACE,EAAE,CAACS,GAAG,GAAG;YACbE,KAAK,EAAE;cAAA,OAAMD,GAAG,CAACC,KAAK,EAAE;YAAA;YACxBC,iBAAiB,EAAE,2BAACC,OAAe;cAAA,OACjCH,GAAG,CAACE,iBAAiB,CAACC,OAAO,CAAC;YAAA;YAChCC,cAAc,EAAE;cAAA,OAAMJ,GAAG,CAACI,cAAc,EAAE;YAAA;WAC3C;;;KAGN;IACDxF,SAAS,EAATA,SAAS;IACTyF,UAAU,EAAE;MACVC,OAAO,EAAE,CAAC,CAAChI,GAAG,CAACsC,SAAS,CAAC4C,MAAM,EAAE/F,IAAI,CAAC;MACtC0F,OAAO,EAAE,CAAC,CAAC7E,GAAG,CAACsC,SAAS,CAACwC,WAAW,EAAE3F,IAAI,CAAC;MAC3C8I,SAAS,EAAE,CAAC,CAACjI,GAAG,CAACsC,SAAS,CAACyC,aAAa,EAAE5F,IAAI,CAAC;MAC/C+I,KAAK,EAAElI,GAAG,CAACsC,SAAS,CAAC4C,MAAM,EAAE/F,IAAI;;GAEpC;AACH;ICnHMgJ,UAAU,GAAG,SAAbA,UAAU,CAIdjG,KAA2C;EAAA,OACxCA,KAAK,CAACkG,MAAM,CAAC7B,aAAa,CAAsBrE,KAAK,CAAC;AAAA;ACF3D,mBAAe,SAAfmG,aACElJ,IAAuB,EACvBmJ,wBAAiC,EACjCpD,MAA2B,EAC3B9G,IAAY,EACZyJ,OAAuB;EAAA,OAEvBS,wBAAwB,mCAEfpD,MAAM,CAAC/F,IAAI,CAAC;IACfoJ,KAAK,kCACCrD,MAAM,CAAC/F,IAAI,CAAC,IAAI+F,MAAM,CAAC/F,IAAI,CAAE,CAACoJ,KAAK,GAAGrD,MAAM,CAAC/F,IAAI,CAAE,CAACoJ,KAAK,GAAG,EAAE,uBACjEnK,IAAI,EAAGyJ,OAAO,IAAI,IAAI;EAAA,KAG3B,EAAE;AAAA;ACrBR,YAAe,SAAfW,MAAgB/J,KAAa;EAAA,OAAK,OAAO,CAACgK,IAAI,CAAChK,KAAK,CAAC;AAAA;ACErD,mBAAe,SAAfiK,aAAgBC,KAAa;EAAA,OAC3BjJ,OAAO,CAACiJ,KAAK,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACvI,KAAK,CAAC,OAAO,CAAC,CAAC;AAAA;SCGhCwI,GAAG,CACzBC,MAAmB,EACnB5I,IAAY,EACZzB,KAAe;EAEf,IAAIsK,KAAK,GAAG,CAAC,CAAC;EACd,IAAMC,QAAQ,GAAGR,KAAK,CAACtI,IAAI,CAAC,GAAG,CAACA,IAAI,CAAC,GAAGwI,YAAY,CAACxI,IAAI,CAAC;EAC1D,IAAM8C,MAAM,GAAGgG,QAAQ,CAAChG,MAAM;EAC9B,IAAMiG,SAAS,GAAGjG,MAAM,GAAG,CAAC;EAE5B,OAAO,EAAE+F,KAAK,GAAG/F,MAAM,EAAE;IACvB,IAAMzC,GAAG,GAAGyI,QAAQ,CAACD,KAAK,CAAC;IAC3B,IAAIG,QAAQ,GAAGzK,KAAK;IAEpB,IAAIsK,KAAK,KAAKE,SAAS,EAAE;MACvB,IAAME,QAAQ,GAAGL,MAAM,CAACvI,GAAG,CAAC;MAC5B2I,QAAQ,GACNvK,QAAQ,CAACwK,QAAQ,CAAC,IAAIvK,KAAK,CAACC,OAAO,CAACsK,QAAQ,CAAC,GACzCA,QAAQ,GACR,CAACC,KAAK,CAAC,CAACJ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,CAAC,GAC5B,EAAE,GACF,EAAE;;IAEVD,MAAM,CAACvI,GAAG,CAAC,GAAG2I,QAAQ;IACtBJ,MAAM,GAAGA,MAAM,CAACvI,GAAG,CAAC;;EAEtB,OAAOuI,MAAM;AACf;AC3BA,IAAMO,YAAY,GAAG,SAAfA,YAAY,CAChBC,MAAiB,EACjBpF,QAAmC,EACnCqF,WAA0D;EAAA,2CAExCA,WAAW,IAAI3G,MAAM,CAACG,IAAI,CAACuG,MAAM,CAAC;IAAA;EAAA;IAApD,oDAAsD;MAAA,IAA3C/I,GAAG;MACZ,IAAMuG,KAAK,GAAG9G,GAAG,CAACsJ,MAAM,EAAE/I,GAAG,CAAC;MAE9B,IAAIuG,KAAK,EAAE;QACT,IAAME,EAAE,GAAGF,KAAK,CAACE,EAAE;QACnB,IAAMvH,OAAO,GAAGgC,IAAI,CAACqF,KAAK,EAAE,IAAI,CAAC;QAEjC,IAAIE,EAAE,IAAI9C,QAAQ,CAAC8C,EAAE,CAAC7H,IAAI,CAAC,EAAE;UAC3B,IAAI6H,EAAE,CAACS,GAAG,CAACE,KAAK,IAAI9H,WAAW,CAACmH,EAAE,CAACS,GAAG,CAACE,KAAK,EAAE,CAAC,EAAE;YAC/C;WACD,MAAM,IAAIX,EAAE,CAACwC,IAAI,EAAE;YAClBxC,EAAE,CAACwC,IAAI,CAAC,CAAC,CAAC,CAAC7B,KAAK,EAAE;YAClB;;SAEH,MAAM,IAAIhJ,QAAQ,CAACc,OAAO,CAAC,EAAE;UAC5B4J,YAAY,CAAC5J,OAAO,EAAEyE,QAAQ,CAAC;;;;EAGpC;IAAA;EAAA;IAAA;EAAA;AACH,CAAC;AC3BD,wBAAe,SAAfuF,kBACEtK,IAAuB,EACvB4J,KAAa;EAAA,IACbW,8EAAiC,EAAE;EAAA,OAEnCA,OAAO,CAACC,WAAW,IAAI9J,WAAW,CAAC6J,OAAO,CAACC,WAAW,CAAC,GACnDD,OAAO,CAACE,SAAS,cACdzK,IAAI,cAAIU,WAAW,CAAC6J,OAAO,CAACG,UAAU,CAAC,GAAGd,KAAK,GAAGW,OAAO,CAACG,UAAU,MAAG,GAC1E,EAAE;AAAA;ACPR,oBAAe,SAAfC,cACE5D,MAAW,EACX6D,SAAoC,EACpCC,OAAe;EAAA,OAEf9D,MAAM,CAACL,GAAG,CAAC,UAACpH,KAAK,EAAEsK,KAAK;IACtB,IAAMkB,MAAM,GAAGF,SAAS,CAACtK,OAAO,CAACsJ,KAAgB,CAAC;IAElD,uCACKtK,KAAK,GACJwL,MAAM,uBAAMD,OAAO,EAAIC,MAAsB,CAACD,OAAO,CAAC,IAAK,EAAE;EAErE,CAAC,CAAC;AAAA;AChBJ,iBAAe,SAAfE,aAAe;EACb,IAAMC,CAAC,GACL,OAAOC,WAAW,KAAK,WAAW,GAAG7L,IAAI,CAAC8L,GAAG,EAAE,GAAGD,WAAW,CAACC,GAAG,EAAE,GAAG,IAAI;EAE5E,OAAO,sCAAsC,CAACzB,OAAO,CAAC,OAAO,EAAE,UAAC0B,CAAC;IAC/D,IAAMC,CAAC,GAAG,CAACC,IAAI,CAACC,MAAM,EAAE,GAAG,EAAE,GAAGN,CAAC,IAAI,EAAE,GAAG,CAAC;IAE3C,OAAO,CAACG,CAAC,IAAI,GAAG,GAAGC,CAAC,GAAIA,CAAC,GAAG,GAAG,GAAI,GAAG,EAAEG,QAAQ,CAAC,EAAE,CAAC;GACrD,CAAC;AACJ,CAAC;ACLD,aAAe,SAAfC;EAAA,IAKEzE,6EAAuC,EAAE;EAAA,IACzC8D,OAAiB;EAAA,OAEjB9D,MAAM,CAACL,GAAG,CAAC,UAACpH,KAAiC;IAAA,uCACvCA,KAAK,CAACuL,OAAO,CAAC,GAAG,EAAE,uBAAMA,OAAO,EAAGE,UAAU,EAAE,CAAE,GAClDzL,KAAK;EAAA,CACR,CAAyE;AAAA;SCbrDmM,MAAM,CAAItM,IAAS,EAAEG,KAAc;EACzD,oCAAW2E,qBAAqB,CAAC9E,IAAI,CAAC,sBAAK8E,qBAAqB,CAAC3E,KAAK,CAAC;AACzE;ACJA,qBAAe,SAAfoM,eAAmBpM,KAAc;EAAA,OAC/BG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,GAAGA,KAAK,CAACoH,GAAG,CAAC;IAAA,OAAM9F,SAAS;EAAA,EAAC,GAAGA,SAAS;AAAA;SCOvC+K,MAAM,CAC5BxM,IAAS,EACTyK,KAAa,EACbtK,KAAe;EAEf,oCACKH,IAAI,CAACyM,KAAK,CAAC,CAAC,EAAEhC,KAAK,CAAC,sBACpB3F,qBAAqB,CAAC3E,KAAK,CAAC,sBAC5BH,IAAI,CAACyM,KAAK,CAAChC,KAAK,CAAC;AAExB;AChBA,kBAAe,SAAfiC,YACE1M,IAAuB,EACvB2M,IAAY,EACZC,EAAU;EAEV,IAAItM,KAAK,CAACC,OAAO,CAACP,IAAI,CAAC,EAAE;IACvB,IAAIuB,WAAW,CAACvB,IAAI,CAAC4M,EAAE,CAAC,CAAC,EAAE;MACzB5M,IAAI,CAAC4M,EAAE,CAAC,GAAGnL,SAAS;;IAEtBzB,IAAI,CAAC6M,MAAM,CAACD,EAAE,EAAE,CAAC,EAAE5M,IAAI,CAAC6M,MAAM,CAACF,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,OAAO3M,IAAI;;EAGb,OAAO,EAAE;AACX,CAAC;ACZD,eAAe,SAAf8M,SACE9B,MAAS,EACTU,OAAe;EAAA,OACZV,MAAM,CAACzD,GAAG,CAAC;IAAA,IAACiB,KAAK,uEAAG,EAAE;IAAA,OAAKrF,IAAI,CAACqF,KAAK,EAAEkD,OAAO,CAAC;EAAA,EAAC;AAAA;SCL7BqB,OAAO,CAAI/M,IAAS,EAAEG,KAAc;EAC1D,oCAAW2E,qBAAqB,CAAC3E,KAAK,CAAC,sBAAK2E,qBAAqB,CAAC9E,IAAI,CAAC;AACzE;ACAA,SAASgN,eAAe,CAAIhN,IAAS,EAAEiN,OAAiB;EACtD,IAAIC,CAAC,GAAG,CAAC;EACT,IAAMC,IAAI,sBAAOnN,IAAI,CAAC;EAAC,4CAEHiN,OAAO;IAAA;EAAA;IAA3B,uDAA6B;MAAA,IAAlBxC,KAAK;MACd0C,IAAI,CAACN,MAAM,CAACpC,KAAK,GAAGyC,CAAC,EAAE,CAAC,CAAC;MACzBA,CAAC,EAAE;;EACJ;IAAA;EAAA;IAAA;EAAA;EAED,OAAO9L,OAAO,CAAC+L,IAAI,CAAC,CAACzI,MAAM,GAAGyI,IAAI,GAAG,EAAE;AACzC;AAEA,oBAAe,SAAfC,cAAmBpN,IAAS,EAAEyK,KAAyB;EAAA,OACrDlJ,WAAW,CAACkJ,KAAK,CAAC,GACd,EAAE,GACFuC,eAAe,CACbhN,IAAI,EACH8E,qBAAqB,CAAC2F,KAAK,CAAc,CAAC4C,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,GAAGC,CAAC;EAAA,EAAC,CACjE;AAAA;ACtBP,kBAAe,SAAfC,YAAmBxN,IAAS,EAAEyN,MAAc,EAAEC,MAAc;EAC1D1N,IAAI,CAACyN,MAAM,CAAC,GAAG,CAACzN,IAAI,CAAC0N,MAAM,CAAC,EAAG1N,IAAI,CAAC0N,MAAM,CAAC,GAAG1N,IAAI,CAACyN,MAAM,CAAC,CAAE,CAAC,CAAC,CAAC;AACjE,CAAC;ACFD,eAAe,SAAfE,SAAmBhG,WAAgB,EAAE8C,KAAa,EAAEtK,KAAU;EAC5DwH,WAAW,CAAC8C,KAAK,CAAC,GAAGtK,KAAK;EAC1B,OAAOwH,WAAW;AACpB,CAAC;IC6BYiG,aAAa,GAAG,SAAhBA,aAAa,CAKxBhK,KAAkE;EAElE,IAAMqC,OAAO,GAAGxC,cAAc,EAAE;EAChC,sBAKIG,KAAK,CAJPsC,OAAO;IAAPA,OAAO,gCAAGD,OAAO,CAACC,OAAO;IACzBrF,IAAI,GAGF+C,KAAK,CAHP/C,IAAI;IAAA,iBAGF+C,KAAK,CAFP8H,OAAO;IAAPA,OAAO,+BAAG,IAAgB;IAC1BxD,gBAAgB,GACdtE,KAAK,CADPsE,gBAAgB;EAElB,uBAA4B3E,KAAK,CAAC4C,QAAQ,CAExCkG,MAAM,CAACnG,OAAO,CAAC2H,cAAc,CAAChN,IAAI,CAAC,EAAE6K,OAAO,CAAC,CAAC;IAAA;IAFzCV,MAAM;IAAE8C,SAAS;EAGxB,IAAMrC,SAAS,GAAGlI,KAAK,CAACuC,MAAM,CAACkF,MAAM,CAAC;EACtC,IAAMnE,KAAK,GAAGtD,KAAK,CAACuC,MAAM,CAACjF,IAAI,CAAC;EAChC,IAAMkN,SAAS,GAAGxK,KAAK,CAACuC,MAAM,CAAC,KAAK,CAAC;EAErCe,KAAK,CAAC1F,OAAO,GAAGN,IAAI;EACpB4K,SAAS,CAACtK,OAAO,GAAG6J,MAAM;EAC1B9E,OAAO,CAACgB,MAAM,CAAC4B,KAAK,CAACxB,GAAG,CAACzG,IAAI,CAAC;EAE9BgF,YAAY,CAAC;IACXD,QAAQ,EAAE,yBAAiC;MAAA,IAA9BgC,MAAM,SAANA,MAAM;QAAQoG,cAAc,SAApBnN,IAAI;MACvB,IAAImN,cAAc,KAAKnH,KAAK,CAAC1F,OAAO,IAAI,CAAC6M,cAAc,EAAE;QACvDF,SAAS,CAACzB,MAAM,CAAC3K,GAAG,CAACkG,MAAM,EAAEf,KAAK,CAAC1F,OAAO,CAAC,EAAEuK,OAAO,CAAC,CAAC;;KAEzD;IACDjG,OAAO,EAAES,OAAO,CAACY,SAAS,CAACgC;GAC5B,CAAC;EAEF,IAAMmF,YAAY,GAAG1K,KAAK,CAAC2K,WAAW,CACpC,UAKEC,8BAAiC;IAEjC,IAAMC,uBAAuB,GAAGtB,QAAQ,CACtCqB,8BAA8B,EAC9BzC,OAAO,CACR;IACDqC,SAAS,CAAC5M,OAAO,GAAG,IAAI;IACxBoJ,GAAG,CAACrE,OAAO,CAAC2B,WAAW,EAAEhH,IAAI,EAAEuN,uBAAuB,CAAC;IACvD,OAAOA,uBAAuB;GAC/B,EACD,CAAClI,OAAO,EAAErF,IAAI,EAAE6K,OAAO,CAAC,CACzB;EAED,IAAMY,QAAM,GAAG,SAATA,QAAM,CACVnM,KAEwD,EACxDiL,OAA+B;IAE/B,IAAMiD,WAAW,GAAGvJ,qBAAqB,CAAC3E,KAAK,CAAC;IAChD,IAAMgO,8BAA8B,GAAGG,MAAQ,CAC7C9C,aAAa,CAACtF,OAAO,CAAC2H,cAAc,CAAChN,IAAI,CAAC,EAAE4K,SAAS,EAAEC,OAAO,CAAC,EAC/DW,MAAM,CAACgC,WAAW,EAAE3C,OAAO,CAAC,CAC7B;IACDxF,OAAO,CAACqI,iBAAiB,CACvB1N,IAAI,EACJyN,MAAQ,EACR;MACEE,IAAI,EAAEjC,cAAc,CAACpM,KAAK;KAC3B,EACD8N,YAAY,CAACE,8BAA8B,CAAC,CAC7C;IACDL,SAAS,CAACK,8BAA8B,CAAC;IAEzCjI,OAAO,CAACgB,MAAM,CAACmC,KAAK,GAAG8B,iBAAiB,CACtCtK,IAAI,EACJsN,8BAA8B,CAACzJ,MAAM,GAAG2J,WAAW,CAAC3J,MAAM,EAC1D0G,OAAO,CACR;GACF;EAED,IAAM2B,SAAO,GAAG,SAAVA,SAAO,CACX5M,KAEwD,EACxDiL,OAA+B;IAE/B,IAAM+C,8BAA8B,GAAGM,OAAS,CAC9CjD,aAAa,CAACtF,OAAO,CAAC2H,cAAc,CAAChN,IAAI,CAAC,EAAE4K,SAAS,EAAEC,OAAO,CAAC,EAC/DW,MAAM,CAACvH,qBAAqB,CAAC3E,KAAK,CAAC,EAAEuL,OAAO,CAAC,CAC9C;IACDxF,OAAO,CAACqI,iBAAiB,CACvB1N,IAAI,EACJ4N,OAAS,EACT;MACED,IAAI,EAAEjC,cAAc,CAACpM,KAAK;KAC3B,EACD8N,YAAY,CAACE,8BAA8B,CAAC,CAC7C;IACDL,SAAS,CAACK,8BAA8B,CAAC;IAEzCjI,OAAO,CAACgB,MAAM,CAACmC,KAAK,GAAG8B,iBAAiB,CAACtK,IAAI,EAAE,CAAC,EAAEuK,OAAO,CAAC;GAC3D;EAED,IAAMsD,MAAM,GAAG,SAATA,MAAM,CAAIjE,KAAyB;IACvC,IAAM0D,8BAA8B,GAE9Bf,aAAa,CACjB5B,aAAa,CAACtF,OAAO,CAAC2H,cAAc,CAAChN,IAAI,CAAC,EAAE4K,SAAS,EAAEC,OAAO,CAAC,EAC/DjB,KAAK,CACN;IACDvE,OAAO,CAACqI,iBAAiB,CACvB1N,IAAI,EACJuM,aAAa,EACb;MACEoB,IAAI,EAAE/D;KACP,EACDwD,YAAY,CAACE,8BAA8B,CAAC,CAC7C;IACDL,SAAS,CAACK,8BAA8B,CAAC;GAC1C;EAED,IAAM3B,QAAM,GAAG,SAATA,QAAM,CACV/B,KAAa,EACbtK,KAEwD,EACxDiL,OAA+B;IAE/B,IAAM+C,8BAA8B,GAAGQ,MAAQ,CAC7CnD,aAAa,CAACtF,OAAO,CAAC2H,cAAc,CAAChN,IAAI,CAAC,EAAE4K,SAAS,EAAEC,OAAO,CAAC,EAC/DjB,KAAK,EACL4B,MAAM,CAACvH,qBAAqB,CAAC3E,KAAK,CAAC,EAAEuL,OAAO,CAAC,CAC9C;IACDxF,OAAO,CAACqI,iBAAiB,CACvB1N,IAAI,EACJ8N,MAAQ,EACR;MACEH,IAAI,EAAE/D,KAAK;MACXmE,IAAI,EAAErC,cAAc,CAACpM,KAAK;KAC3B,EACD8N,YAAY,CAACE,8BAA8B,CAAC,CAC7C;IACDL,SAAS,CAACK,8BAA8B,CAAC;IAEzCjI,OAAO,CAACgB,MAAM,CAACmC,KAAK,GAAG8B,iBAAiB,CAACtK,IAAI,EAAE4J,KAAK,EAAEW,OAAO,CAAC;GAC/D;EAED,IAAMyD,IAAI,GAAG,SAAPA,IAAI,CAAIpB,MAAc,EAAEC,MAAc;IAC1C,IAAMS,8BAA8B,GAAG3C,aAAa,CAClDtF,OAAO,CAAC2H,cAAc,CAAChN,IAAI,CAAC,EAC5B4K,SAAS,EACTC,OAAO,CACR;IACD8B,WAAW,CAACW,8BAA8B,EAAEV,MAAM,EAAEC,MAAM,CAAC;IAC3DxH,OAAO,CAACqI,iBAAiB,CACvB1N,IAAI,EACJ2M,WAAW,EACX;MACEgB,IAAI,EAAEf,MAAM;MACZmB,IAAI,EAAElB;KACP,EACDO,YAAY,CAACE,8BAA8B,CAAC,EAC5C,KAAK,CACN;IACDL,SAAS,CAACK,8BAA8B,CAAC;GAC1C;EAED,IAAMW,IAAI,GAAG,SAAPA,IAAI,CAAInC,IAAY,EAAEC,EAAU;IACpC,IAAMuB,8BAA8B,GAAG3C,aAAa,CAClDtF,OAAO,CAAC2H,cAAc,CAAChN,IAAI,CAAC,EAC5B4K,SAAS,EACTC,OAAO,CACR;IACDgB,WAAW,CAACyB,8BAA8B,EAAExB,IAAI,EAAEC,EAAE,CAAC;IACrD1G,OAAO,CAACqI,iBAAiB,CACvB1N,IAAI,EACJ6L,WAAW,EACX;MACE8B,IAAI,EAAE7B,IAAI;MACViC,IAAI,EAAEhC;KACP,EACDqB,YAAY,CAACE,8BAA8B,CAAC,EAC5C,KAAK,CACN;IACDL,SAAS,CAACK,8BAA8B,CAAC;GAC1C;EAED,IAAMY,MAAM,GAAG,SAATA,MAAM,CACVtE,KAAa,EACbtK,KAAyD;IAEzD,IAAMgO,8BAA8B,GAAG3C,aAAa,CAClDtF,OAAO,CAAC2H,cAAc,CAAChN,IAAI,CAAC,EAC5B4K,SAAS,EACTC,OAAO,CACR;IACD,IAAM0C,uBAAuB,GAAGT,QAAQ,CACtCQ,8BAA8B,EAC9B1D,KAAK,EACLtK,KAAK,CACN;IACDsL,SAAS,CAACtK,OAAO,GAAGkL,MAAM,CAAC+B,uBAAuB,EAAE1C,OAAO,CAAC;IAC5DxF,OAAO,CAACqI,iBAAiB,CACvB1N,IAAI,EACJ8M,QAAQ,EACR;MACEa,IAAI,EAAE/D,KAAK;MACXmE,IAAI,EAAEzO;KACP,EACD8N,YAAY,CAACxC,SAAS,CAACtK,OAAO,CAAC,EAC/B,IAAI,EACJ,KAAK,CACN;IACD2M,SAAS,CAACrC,SAAS,CAACtK,OAAO,CAAC;GAC7B;EAED,IAAMmJ,OAAO,GAAG,SAAVA,OAAO,CACXnK,KAEwD;IAExD,IAAMgO,8BAA8B,GAE9B9B,MAAM,CAACvH,qBAAqB,CAAC3E,KAAK,CAAC,EAAEuL,OAAO,CAAC;IACnDxF,OAAO,CAACqI,iBAAiB,CACvB1N,IAAI,EACJ;MAAA,OAAMsN,8BAA8B;IAAA,GACpC,EAAE,EACFF,YAAY,CAACE,8BAA8B,CAAC,EAC5C,IAAI,EACJ,KAAK,CACN;IACDL,SAAS,CAACK,8BAA8B,CAAC;GAC1C;EAED5K,KAAK,CAACwC,SAAS,CAAC;IACdG,OAAO,CAAC6C,WAAW,CAACC,MAAM,GAAG,KAAK;IAElC,IAAI9C,OAAO,CAACgB,MAAM,CAACO,QAAQ,EAAE;MAC3BvB,OAAO,CAACY,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC,EAAE,CAAC;KACjC,MAAM;MAAA,4CACoBO,OAAO,CAACgB,MAAM,CAACG,KAAK;QAAA;MAAA;QAA7C,uDAA+C;UAAA,IAApC2H,UAAU;UACnB,IAAInO,IAAI,CAACqE,UAAU,CAAC8J,UAAU,CAAC,EAAE;YAC/B9I,OAAO,CAACY,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC,EAAE,CAAC;YAChC;;;MAEH;QAAA;MAAA;QAAA;MAAA;;IAGH,IAAIoI,SAAS,CAAC5M,OAAO,EAAE;MACrB+E,OAAO,CAAC+I,cAAc,CAAC,CAACpO,IAAI,CAAC,CAAC,CAACqO,IAAI,CAAC,UAACpN,MAAM;QACzC,IAAM8H,KAAK,GAAGlI,GAAG,CAACI,MAAM,CAAC8E,MAAM,EAAE/F,IAAI,CAAC;QAEtC,IAAI+I,KAAK,IAAIA,KAAK,CAAC9J,IAAI,IAAI,CAAC4B,GAAG,CAACwE,OAAO,CAACE,UAAU,CAACQ,MAAM,EAAE/F,IAAI,CAAC,EAAE;UAChE0J,GAAG,CAACrE,OAAO,CAACE,UAAU,CAACQ,MAAM,EAAE/F,IAAI,EAAE+I,KAAK,CAAC;UAC3C1D,OAAO,CAACY,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;YAC3BiB,MAAM,EAAEV,OAAO,CAACE,UAAU,CAACQ;WAC5B,CAAC;;OAEL,CAAC;;IAGJV,OAAO,CAACY,SAAS,CAACO,KAAK,CAAC1B,IAAI,CAAC;MAC3B9E,IAAI,EAAJA,IAAI;MACJ+G,MAAM,EAAE1B,OAAO,CAAC2B;KACjB,CAAC;IAEF3B,OAAO,CAACgB,MAAM,CAACmC,KAAK,IAClB0B,YAAY,CAAC7E,OAAO,CAACuC,OAAO,EAAE,UAACxG,GAAW;MAAA,OACxCA,GAAG,CAACiD,UAAU,CAACgB,OAAO,CAACgB,MAAM,CAACmC,KAAK,CAAC;IAAA,EACrC;IAEHnD,OAAO,CAACgB,MAAM,CAACmC,KAAK,GAAG,EAAE;IAEzBnD,OAAO,CAACjC,eAAe,CAAC0C,OAAO,IAAIT,OAAO,CAACiJ,YAAY,EAAE;GAC1D,EAAE,CAACnE,MAAM,EAAEnK,IAAI,EAAEqF,OAAO,EAAEwF,OAAO,CAAC,CAAC;EAEpCnI,KAAK,CAACwC,SAAS,CAAC;IACd,CAACrE,GAAG,CAACwE,OAAO,CAAC2B,WAAW,EAAEhH,IAAI,CAAC,IAAI0J,GAAG,CAACrE,OAAO,CAAC2B,WAAW,EAAEhH,IAAI,EAAE,EAAE,CAAC;IAErE,OAAO;MACL,IAAIqF,OAAO,CAAC2C,QAAQ,CAACX,gBAAgB,IAAIA,gBAAgB,EAAE;QACzDhC,OAAO,CAAC+C,UAAU,CAACpI,IAA+B,CAAC;;KAEtD;GACF,EAAE,CAACA,IAAI,EAAEqF,OAAO,EAAEwF,OAAO,EAAExD,gBAAgB,CAAC,CAAC;EAE9C,OAAO;IACL2G,IAAI,EAAEtL,KAAK,CAAC2K,WAAW,CAACW,IAAI,EAAE,CAACZ,YAAY,EAAEpN,IAAI,EAAEqF,OAAO,EAAEwF,OAAO,CAAC,CAAC;IACrEoD,IAAI,EAAEvL,KAAK,CAAC2K,WAAW,CAACY,IAAI,EAAE,CAACb,YAAY,EAAEpN,IAAI,EAAEqF,OAAO,EAAEwF,OAAO,CAAC,CAAC;IACrEqB,OAAO,EAAExJ,KAAK,CAAC2K,WAAW,CAACnB,SAAO,EAAE,CAACkB,YAAY,EAAEpN,IAAI,EAAEqF,OAAO,EAAEwF,OAAO,CAAC,CAAC;IAC3EY,MAAM,EAAE/I,KAAK,CAAC2K,WAAW,CAAC5B,QAAM,EAAE,CAAC2B,YAAY,EAAEpN,IAAI,EAAEqF,OAAO,EAAEwF,OAAO,CAAC,CAAC;IACzEgD,MAAM,EAAEnL,KAAK,CAAC2K,WAAW,CAACQ,MAAM,EAAE,CAACT,YAAY,EAAEpN,IAAI,EAAEqF,OAAO,EAAEwF,OAAO,CAAC,CAAC;IACzEc,MAAM,EAAEjJ,KAAK,CAAC2K,WAAW,CAAC1B,QAAM,EAAE,CAACyB,YAAY,EAAEpN,IAAI,EAAEqF,OAAO,EAAEwF,OAAO,CAAC,CAAC;IACzEqD,MAAM,EAAExL,KAAK,CAAC2K,WAAW,CAACa,MAAM,EAAE,CAACd,YAAY,EAAEpN,IAAI,EAAEqF,OAAO,EAAEwF,OAAO,CAAC,CAAC;IACzEpB,OAAO,EAAE/G,KAAK,CAAC2K,WAAW,CAAC5D,OAAO,EAAE,CAAC2D,YAAY,EAAEpN,IAAI,EAAEqF,OAAO,EAAEwF,OAAO,CAAC,CAAC;IAC3EV,MAAM,EAAEA;GAKT;AACH;AC/UA,iBAAe,SAAfoE,WAAgBjP,KAAc;EAAA,OAC5B,OAAOA,KAAK,KAAK,UAAU;AAAA;SCELkP,WAAW,CAAIrP,IAAO;EAC5C,IAAIqD,IAAS;EACb,IAAM9C,OAAO,GAAGD,KAAK,CAACC,OAAO,CAACP,IAAI,CAAC;EAEnC,IAAIA,IAAI,YAAYC,IAAI,EAAE;IACxBoD,IAAI,GAAG,IAAIpD,IAAI,CAACD,IAAI,CAAC;GACtB,MAAM,IAAIA,IAAI,YAAYsP,GAAG,EAAE;IAC9BjM,IAAI,GAAG,IAAIiM,GAAG,CAACtP,IAAI,CAAC;GACrB,MAAM,IAAIO,OAAO,IAAIF,QAAQ,CAACL,IAAI,CAAC,EAAE;IACpCqD,IAAI,GAAG9C,OAAO,GAAG,EAAE,GAAG,EAAE;IACxB,KAAK,IAAM0B,GAAG,IAAIjC,IAAI,EAAE;MACtB,IAAIoP,UAAU,CAACpP,IAAI,CAACiC,GAAG,CAAC,CAAC,EAAE;QACzBoB,IAAI,GAAGrD,IAAI;QACX;;MAEFqD,IAAI,CAACpB,GAAG,CAAC,GAAGoN,WAAW,CAACrP,IAAI,CAACiC,GAAG,CAAC,CAAC;;GAErC,MAAM;IACL,OAAOjC,IAAI;;EAGb,OAAOqD,IAAI;AACb;SCTwBkM,aAAa;EACnC,IAAIC,UAAU,GAAkB,EAAE;EAElC,IAAM7J,IAAI,GAAG,SAAPA,IAAI,CAAIxF,KAAQ;IAAA,4CACGqP,UAAU;MAAA;IAAA;MAAjC,uDAAmC;QAAA,IAAxBC,QAAQ;QACjBA,QAAQ,CAAC9J,IAAI,CAACxF,KAAK,CAAC;;IACrB;MAAA;IAAA;MAAA;IAAA;GACF;EAED,IAAMuF,SAAS,GAAG,SAAZA,SAAS,CAAI+J,QAAqB;IACtCD,UAAU,CAACE,IAAI,CAACD,QAAQ,CAAC;IACzB,OAAO;MACLpK,WAAW,EAAE;QACXmK,UAAU,GAAGA,UAAU,CAACnO,MAAM,CAAC,UAACsO,CAAC;UAAA,OAAKA,CAAC,KAAKF,QAAQ;QAAA,EAAC;;KAExD;GACF;EAED,IAAMpK,WAAW,GAAG,SAAdA,WAAW,GAAG;IAClBmK,UAAU,GAAG,EAAE;GAChB;EAED,OAAO;IACL,IAAII,SAAS;MACX,OAAOJ,UAAU;KAClB;IACD7J,IAAI,EAAJA,IAAI;IACJD,SAAS,EAATA,SAAS;IACTL,WAAW,EAAXA;GACD;AACH;ACzCA,kBAAe,SAAfwK,YAAgB1P,KAAc;EAAA,OAC5BD,iBAAiB,CAACC,KAAK,CAAC,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;AAAA;SCD1B2P,SAAS,CAACC,OAAY,EAAEC,OAAY;EAC1D,IAAIH,WAAW,CAACE,OAAO,CAAC,IAAIF,WAAW,CAACG,OAAO,CAAC,EAAE;IAChD,OAAOD,OAAO,KAAKC,OAAO;;EAG5B,IAAIjQ,YAAY,CAACgQ,OAAO,CAAC,IAAIhQ,YAAY,CAACiQ,OAAO,CAAC,EAAE;IAClD,OAAOD,OAAO,CAACE,OAAO,EAAE,KAAKD,OAAO,CAACC,OAAO,EAAE;;EAGhD,IAAMC,KAAK,GAAG5L,MAAM,CAACG,IAAI,CAACsL,OAAO,CAAC;EAClC,IAAMI,KAAK,GAAG7L,MAAM,CAACG,IAAI,CAACuL,OAAO,CAAC;EAElC,IAAIE,KAAK,CAACxL,MAAM,KAAKyL,KAAK,CAACzL,MAAM,EAAE;IACjC,OAAO,KAAK;;EAGd,yBAAkBwL,KAAK,2BAAE;IAApB,IAAMjO,GAAG;IACZ,IAAMmO,IAAI,GAAGL,OAAO,CAAC9N,GAAG,CAAC;IAEzB,IAAI,CAACkO,KAAK,CAACE,QAAQ,CAACpO,GAAG,CAAC,EAAE;MACxB,OAAO,KAAK;;IAGd,IAAIA,GAAG,KAAK,KAAK,EAAE;MACjB,IAAMqO,IAAI,GAAGN,OAAO,CAAC/N,GAAG,CAAC;MAEzB,IACGlC,YAAY,CAACqQ,IAAI,CAAC,IAAIrQ,YAAY,CAACuQ,IAAI,CAAC,IACxCjQ,QAAQ,CAAC+P,IAAI,CAAC,IAAI/P,QAAQ,CAACiQ,IAAI,CAAE,IACjChQ,KAAK,CAACC,OAAO,CAAC6P,IAAI,CAAC,IAAI9P,KAAK,CAACC,OAAO,CAAC+P,IAAI,CAAE,GACxC,CAACR,SAAS,CAACM,IAAI,EAAEE,IAAI,CAAC,GACtBF,IAAI,KAAKE,IAAI,EACjB;QACA,OAAO,KAAK;;;;EAKlB,OAAO,IAAI;AACb;ACzCA,yBAAe,SAAfC,mBACEC,IAAW;EAAA,OAOP;IACJC,UAAU,EAAE,CAACD,IAAI,IAAIA,IAAI,KAAKnO,eAAe,CAACG,QAAQ;IACtDkO,QAAQ,EAAEF,IAAI,KAAKnO,eAAe,CAACC,MAAM;IACzCqO,UAAU,EAAEH,IAAI,KAAKnO,eAAe,CAACE,QAAQ;IAC7CqO,OAAO,EAAEJ,IAAI,KAAKnO,eAAe,CAACK,GAAG;IACrCmO,SAAS,EAAEL,IAAI,KAAKnO,eAAe,CAACI;GACrC;AAAA,CAAC;ACjBF,gBAAe,SAAfqO,UAAgB3Q,KAAc;EAAA,OAAuB,OAAOA,KAAK,KAAK,SAAS;AAAA;ACE/E,kBAAe,SAAf4Q,YAAgBlR,OAAqB;EAAA,OACnCA,OAAO,CAACC,IAAI,KAAK,MAAM;AAAA;ACHzB,oBAAe,SAAfkR,cAAgB7Q,KAAU;EAAA,OACxBA,KAAK,YAAY8Q,WAAW;AAAA;ACC9B,uBAAe,SAAfC,iBAAgBrR,OAAqB;EAAA,OACnCA,OAAO,CAACC,IAAI,sBAAsB;AAAA;ACDpC,mBAAe,SAAfqR,aAAgBtR,OAAqB;EAAA,OACnCA,OAAO,CAACC,IAAI,KAAK,OAAO;AAAA;ACE1B,gCAAe,SAAfsR,0BAAgBjI,GAAiB;EAAA,OAC/BgI,YAAY,CAAChI,GAAG,CAAC,IAAIvJ,eAAe,CAACuJ,GAAG,CAAC;AAAA;ACN3C,YAAe,OAAOkI,MAAM,KAAK,WAAW,IAC1C,OAAOA,MAAM,CAACJ,WAAW,KAAK,WAAW,IACzC,OAAOK,QAAQ,KAAK,WAAW;ACEjC,WAAe,SAAfC,KAAgBpI,GAAQ;EAAA,OAAK6H,aAAa,CAAC7H,GAAG,CAAC,IAAImI,QAAQ,CAACE,QAAQ,CAACrI,GAAG,CAAC;AAAA;ACGzE,SAASsI,OAAO,CAACjH,MAAW,EAAEkH,UAA+B;EAC3D,IAAMhN,MAAM,GAAGgN,UAAU,CAACjF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC/H,MAAM;EAC7C,IAAI+F,KAAK,GAAG,CAAC;EAEb,OAAOA,KAAK,GAAG/F,MAAM,EAAE;IACrB8F,MAAM,GAAGjJ,WAAW,CAACiJ,MAAM,CAAC,GAAGC,KAAK,EAAE,GAAGD,MAAM,CAACkH,UAAU,CAACjH,KAAK,EAAE,CAAC,CAAC;;EAGtE,OAAOD,MAAM;AACf;SAEwBmH,KAAK,CAACnH,MAAW,EAAE5I,IAAY;EACrD,IAAM8P,UAAU,GAAGxH,KAAK,CAACtI,IAAI,CAAC,GAAG,CAACA,IAAI,CAAC,GAAGwI,YAAY,CAACxI,IAAI,CAAC;EAC5D,IAAMgQ,WAAW,GACfF,UAAU,CAAChN,MAAM,IAAI,CAAC,GAAG8F,MAAM,GAAGiH,OAAO,CAACjH,MAAM,EAAEkH,UAAU,CAAC;EAC/D,IAAMzP,GAAG,GAAGyP,UAAU,CAACA,UAAU,CAAChN,MAAM,GAAG,CAAC,CAAC;EAC7C,IAAImN,cAAc;EAElB,IAAID,WAAW,EAAE;IACf,OAAOA,WAAW,CAAC3P,GAAG,CAAC;;EAGzB,KAAK,IAAI6P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAACjF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC/H,MAAM,EAAEoN,CAAC,EAAE,EAAE;IACvD,IAAIrH,KAAK,GAAG,CAAC,CAAC;IACd,IAAIsH,SAAS;IACb,IAAMC,YAAY,GAAGN,UAAU,CAACjF,KAAK,CAAC,CAAC,EAAE,EAAEqF,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,IAAMG,kBAAkB,GAAGD,YAAY,CAACtN,MAAM,GAAG,CAAC;IAElD,IAAIoN,CAAC,GAAG,CAAC,EAAE;MACTD,cAAc,GAAGrH,MAAM;;IAGzB,OAAO,EAAEC,KAAK,GAAGuH,YAAY,CAACtN,MAAM,EAAE;MACpC,IAAMwN,IAAI,GAAGF,YAAY,CAACvH,KAAK,CAAC;MAChCsH,SAAS,GAAGA,SAAS,GAAGA,SAAS,CAACG,IAAI,CAAC,GAAG1H,MAAM,CAAC0H,IAAI,CAAC;MAEtD,IACED,kBAAkB,KAAKxH,KAAK,KAC1BpK,QAAQ,CAAC0R,SAAS,CAAC,IAAIvN,aAAa,CAACuN,SAAS,CAAC,IAC9CzR,KAAK,CAACC,OAAO,CAACwR,SAAS,CAAC,IACvB,CAACA,SAAS,CAAC1Q,MAAM,CACf,UAACrB,IAAI;QAAA,OACFK,QAAQ,CAACL,IAAI,CAAC,IAAI,CAACwE,aAAa,CAACxE,IAAI,CAAC,IAAK8Q,SAAS,CAAC9Q,IAAI,CAAC;MAAA,EAC9D,CAAC0E,MAAO,CAAC,EACd;QACAmN,cAAc,GAAG,OAAOA,cAAc,CAACK,IAAI,CAAC,GAAG,OAAO1H,MAAM,CAAC0H,IAAI,CAAC;;MAGpEL,cAAc,GAAGE,SAAS;;;EAI9B,OAAOvH,MAAM;AACf;ACrDA,IAAM2H,aAAa,GAAwB;EACzChS,KAAK,EAAE,KAAK;EACZwG,OAAO,EAAE;CACV;AAED,IAAMyL,WAAW,GAAG;EAAEjS,KAAK,EAAE,IAAI;EAAEwG,OAAO,EAAE;AAAI,CAAE;AAElD,uBAAe,SAAf0L,iBAAgBjH,OAA4B;EAC1C,IAAI9K,KAAK,CAACC,OAAO,CAAC6K,OAAO,CAAC,EAAE;IAC1B,IAAIA,OAAO,CAAC1G,MAAM,GAAG,CAAC,EAAE;MACtB,IAAMkD,MAAM,GAAGwD,OAAO,CACnB/J,MAAM,CAAC,UAACiR,MAAM;QAAA,OAAKA,MAAM,IAAIA,MAAM,CAAC3R,OAAO,IAAI,CAAC2R,MAAM,CAAC9M,QAAQ;MAAA,EAAC,CAChE+B,GAAG,CAAC,UAAC+K,MAAM;QAAA,OAAKA,MAAM,CAACnS,KAAK;MAAA,EAAC;MAChC,OAAO;QAAEA,KAAK,EAAEyH,MAAM;QAAEjB,OAAO,EAAE,CAAC,CAACiB,MAAM,CAAClD;MAAM,CAAE;;IAGpD,OAAO0G,OAAO,CAAC,CAAC,CAAC,CAACzK,OAAO,IAAI,CAACyK,OAAO,CAAC,CAAC,CAAC,CAAC5F,QAAQ;;IAE7C4F,OAAO,CAAC,CAAC,CAAC,CAACmH,UAAU,IAAI,CAAChR,WAAW,CAAC6J,OAAO,CAAC,CAAC,CAAC,CAACmH,UAAU,CAACpS,KAAK,CAAC,GAChEoB,WAAW,CAAC6J,OAAO,CAAC,CAAC,CAAC,CAACjL,KAAK,CAAC,IAAIiL,OAAO,CAAC,CAAC,CAAC,CAACjL,KAAK,KAAK,EAAE,GACtDiS,WAAW,GACX;MAAEjS,KAAK,EAAEiL,OAAO,CAAC,CAAC,CAAC,CAACjL,KAAK;MAAEwG,OAAO,EAAE;IAAI,CAAE,GAC5CyL,WAAW,GACbD,aAAa;;EAGnB,OAAOA,aAAa;AACtB,CAAC;AC/BD,sBAAe,SAAfK,gBACErS,KAAU;EAAA,IACRsS,aAAa,SAAbA,aAAa;IAAEC,WAAW,SAAXA,WAAW;IAAEC,UAAU,SAAVA,UAAU;EAAA,OAExCpR,WAAW,CAACpB,KAAK,CAAC,GACdA,KAAK,GACLsS,aAAa,GACbtS,KAAK,KAAK,EAAE,GACVyS,GAAG,GACH,CAACzS,KAAK,GACRuS,WAAW,GACX,IAAIzS,IAAI,CAACE,KAAK,CAAC,GACfwS,UAAU,GACVA,UAAU,CAACxS,KAAK,CAAC,GACjBA,KAAK;AAAA;ACZX,IAAM0S,aAAa,GAAqB;EACtClM,OAAO,EAAE,KAAK;EACdxG,KAAK,EAAE;CACR;AAED,oBAAe,SAAf2S,cAAgB1H,OAA4B;EAAA,OAC1C9K,KAAK,CAACC,OAAO,CAAC6K,OAAO,CAAC,GAClBA,OAAO,CAACpJ,MAAM,CACZ,UAAC+Q,QAAQ,EAAET,MAAM;IAAA,OACfA,MAAM,IAAIA,MAAM,CAAC3R,OAAO,IAAI,CAAC2R,MAAM,CAAC9M,QAAQ,GACxC;MACEmB,OAAO,EAAE,IAAI;MACbxG,KAAK,EAAEmS,MAAM,CAACnS;KACf,GACD4S,QAAQ;EAAA,GACdF,aAAa,CACd,GACDA,aAAa;AAAA;SCXKG,aAAa,CAACtK,EAAe;EACnD,IAAMS,GAAG,GAAGT,EAAE,CAACS,GAAG;EAElB,IAAIT,EAAE,CAACwC,IAAI,GAAGxC,EAAE,CAACwC,IAAI,CAAC+H,KAAK,CAAC,UAAC9J,GAAG;IAAA,OAAKA,GAAG,CAAC3D,QAAQ;EAAA,EAAC,GAAG2D,GAAG,CAAC3D,QAAQ,EAAE;IACjE;;EAGF,IAAIuL,WAAW,CAAC5H,GAAG,CAAC,EAAE;IACpB,OAAOA,GAAG,CAAC+J,KAAK;;EAGlB,IAAI/B,YAAY,CAAChI,GAAG,CAAC,EAAE;IACrB,OAAO2J,aAAa,CAACpK,EAAE,CAACwC,IAAI,CAAC,CAAC/K,KAAK;;EAGrC,IAAI+Q,gBAAgB,CAAC/H,GAAG,CAAC,EAAE;IACzB,OAAO,mBAAIA,GAAG,CAACgK,eAAe,EAAE5L,GAAG,CAAC;MAAA,IAAGpH,KAAK,SAALA,KAAK;MAAA,OAAOA,KAAK;IAAA,EAAC;;EAG3D,IAAIiT,eAAU,CAACjK,GAAG,CAAC,EAAE;IACnB,OAAOkJ,gBAAgB,CAAC3J,EAAE,CAACwC,IAAI,CAAC,CAAC/K,KAAK;;EAGxC,OAAOqS,eAAe,CAACjR,WAAW,CAAC4H,GAAG,CAAChJ,KAAK,CAAC,GAAGuI,EAAE,CAACS,GAAG,CAAChJ,KAAK,GAAGgJ,GAAG,CAAChJ,KAAK,EAAEuI,EAAE,CAAC;AAC/E;ACzBA,yBAAe,SAAf2K,mBACEpI,WAAyD,EACzDxC,OAAkB,EAClB6K,YAA2B,EAC3BC,yBAA+C;EAE/C,IAAMvI,MAAM,GAA2C,EAAE;EAAC,4CAEvCC,WAAW;IAAA;EAAA;IAA9B,uDAAgC;MAAA,IAArBpK,IAAI;MACb,IAAM2H,KAAK,GAAU9G,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,CAAC;MAEvC2H,KAAK,IAAI+B,GAAG,CAACS,MAAM,EAAEnK,IAAI,EAAE2H,KAAK,CAACE,EAAE,CAAC;;EACrC;IAAA;EAAA;IAAA;EAAA;EAED,OAAO;IACL4K,YAAY,EAAZA,YAAY;IACZrS,KAAK,qBAAMgK,WAAW,CAA8B;IACpDD,MAAM,EAANA,MAAM;IACNuI,yBAAyB,EAAzBA;GACD;AACH,CAAC;AC5BD,oBAAe,SAAfC,cAAgBpI,OAAoB;EAAA,OAClCA,OAAO,CAACzC,KAAK,KACZyC,OAAO,CAACnI,QAAQ,IACfmI,OAAO,CAACvI,GAAG,IACXuI,OAAO,CAACxI,GAAG,IACXwI,OAAO,CAACtI,SAAS,IACjBsI,OAAO,CAACrI,SAAS,IACjBqI,OAAO,CAACpI,OAAO,IACfoI,OAAO,CAAClI,QAAQ,CAAC;AAAA;SCNGuQ,iBAAiB,CACvC7M,MAAmB,EACnB6B,OAAoB,EACpB5H,IAAY;EAKZ,IAAM+I,KAAK,GAAGlI,GAAG,CAACkF,MAAM,EAAE/F,IAAI,CAAC;EAE/B,IAAI+I,KAAK,IAAIM,KAAK,CAACrJ,IAAI,CAAC,EAAE;IACxB,OAAO;MACL+I,KAAK,EAALA,KAAK;MACL/I,IAAI,EAAJA;KACD;;EAGH,IAAMI,KAAK,GAAGJ,IAAI,CAACkB,KAAK,CAAC,GAAG,CAAC;EAE7B,OAAOd,KAAK,CAACyD,MAAM,EAAE;IACnB,IAAM8C,SAAS,GAAGvG,KAAK,CAACyS,IAAI,CAAC,GAAG,CAAC;IACjC,IAAMlL,KAAK,GAAG9G,GAAG,CAAC+G,OAAO,EAAEjB,SAAS,CAAC;IACrC,IAAMmM,UAAU,GAAGjS,GAAG,CAACkF,MAAM,EAAEY,SAAS,CAAC;IAEzC,IAAIgB,KAAK,IAAI,CAAClI,KAAK,CAACC,OAAO,CAACiI,KAAK,CAAC,IAAI3H,IAAI,KAAK2G,SAAS,EAAE;MACxD,OAAO;QAAE3G,IAAI,EAAJA;MAAI,CAAE;;IAGjB,IAAI8S,UAAU,IAAIA,UAAU,CAAC7T,IAAI,EAAE;MACjC,OAAO;QACLe,IAAI,EAAE2G,SAAS;QACfoC,KAAK,EAAE+J;OACR;;IAGH1S,KAAK,CAAC2S,GAAG,EAAE;;EAGb,OAAO;IACL/S,IAAI,EAAJA;GACD;AACH;SC1CgBgT,SAAS,CAGvBnT,MAAS,EAAE0C,MAAS;EACpB,IAAIyM,WAAW,CAACnP,MAAM,CAAC,IAAImP,WAAW,CAACzM,MAAM,CAAC,EAAE;IAC9C,OAAOA,MAAM;;EAGf,KAAK,IAAMnB,GAAG,IAAImB,MAAM,EAAE;IACxB,IAAM0Q,WAAW,GAAGpT,MAAM,CAACuB,GAAG,CAAC;IAC/B,IAAM8R,WAAW,GAAG3Q,MAAM,CAACnB,GAAG,CAAC;IAE/B,IAAI;MACFvB,MAAM,CAACuB,GAAG,CAAC,GACR5B,QAAQ,CAACyT,WAAW,CAAC,IAAIzT,QAAQ,CAAC0T,WAAW,CAAC,IAC9CzT,KAAK,CAACC,OAAO,CAACuT,WAAW,CAAC,IAAIxT,KAAK,CAACC,OAAO,CAACwT,WAAW,CAAE,GACtDF,SAAS,CAACC,WAAW,EAAEC,WAAW,CAAC,GACnCA,WAAW;KAClB,CAAC,WAAM;;EAGV,OAAOrT,MAAM;AACf;ACnBA,SAASsT,cAAc,CAKrBpM,MAAS,EACTqM,aAAgB,EAChBzN,WAA2C,EAC3C0N,UAAc,EACdC,UAAoB;EAEpB,IAAI1J,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAG7C,MAAM,CAAClD,MAAM,EAAE;IAC9B,KAAK,IAAMzC,GAAG,IAAI2F,MAAM,CAAC6C,KAAK,CAAC,EAAE;MAC/B,IAAInK,KAAK,CAACC,OAAO,CAACqH,MAAM,CAAC6C,KAAK,CAAC,CAACxI,GAAG,CAAC,CAAC,EAAE;QACrC,CAACuE,WAAW,CAACiE,KAAK,CAAC,KAAKjE,WAAW,CAACiE,KAAK,CAAC,GAAG,EAAE,CAAC;QAChDjE,WAAW,CAACiE,KAAK,CAAC,CAACxI,GAAG,CAAC,GAAG,EAAE;QAC5B+R,cAAc,CACZpM,MAAM,CAAC6C,KAAK,CAAC,CAACxI,GAAG,CAAM,EACvBP,GAAG,CAACuS,aAAa,CAACxJ,KAAK,CAAC,IAAI,EAAE,EAAExI,GAAG,EAAE,EAAE,CAAC,EACxCuE,WAAW,CAACiE,KAAK,CAAC,CAACxI,GAAG,CAAO,EAC7BuE,WAAW,CAACiE,KAAK,CAAC,EAClBxI,GAAG,CACJ;OACF,MAAM;QACL,CAAC/B,iBAAiB,CAAC+T,aAAa,CAAC,IACjCnE,SAAS,CAACpO,GAAG,CAACuS,aAAa,CAACxJ,KAAK,CAAC,IAAI,EAAE,EAAExI,GAAG,CAAC,EAAE2F,MAAM,CAAC6C,KAAK,CAAC,CAACxI,GAAG,CAAC,CAAC,GAC/DsI,GAAG,CAAC/D,WAAW,CAACiE,KAAK,CAAC,IAAI,EAAE,EAAExI,GAAG,CAAC,GACjCuE,WAAW,CAACiE,KAAK,CAAC,mCACdjE,WAAW,CAACiE,KAAK,CAAC,uBACpBxI,GAAG,EAAG,IAAI,EACX;;;IAIViS,UAAU,IACR,CAAC1N,WAAW,CAAC9B,MAAM,IACnB,OAAOwP,UAAU,CAACC,UAAqB,CAAC;;EAG5C,OAAO3N,WAAW;AACpB;AAEA,+BAAe,SAAf4N,yBACExM,MAAS,EACTqM,aAAgB,EAChBzN,WAA2C;EAAA,OAE3CqN,SAAS,CACPG,cAAc,CAACpM,MAAM,EAAEqM,aAAa,EAAEzN,WAAW,CAACiG,KAAK,CAAC,CAAC,EAAE7E,MAAM,CAAClD,MAAM,CAAC,CAAC,EAC1EsP,cAAc,CAACC,aAAa,EAAErM,MAAM,EAAEpB,WAAW,CAACiG,KAAK,CAAC,CAAC,EAAE7E,MAAM,CAAClD,MAAM,CAAC,CAAC,CAC3E;AAAA;AC1DH,qBAAe,SAAf2P,eACEC,WAAoB,EACpB3K,SAAkB,EAClB4K,WAAoB,EACpBC,cAGC,EACDhE,IAME;EAEF,IAAIA,IAAI,CAACI,OAAO,EAAE;IAChB,OAAO,KAAK;GACb,MAAM,IAAI,CAAC2D,WAAW,IAAI/D,IAAI,CAACK,SAAS,EAAE;IACzC,OAAO,EAAElH,SAAS,IAAI2K,WAAW,CAAC;GACnC,MAAM,IAAIC,WAAW,GAAGC,cAAc,CAAC9D,QAAQ,GAAGF,IAAI,CAACE,QAAQ,EAAE;IAChE,OAAO,CAAC4D,WAAW;GACpB,MAAM,IAAIC,WAAW,GAAGC,cAAc,CAAC7D,UAAU,GAAGH,IAAI,CAACG,UAAU,EAAE;IACpE,OAAO2D,WAAW;;EAEpB,OAAO,IAAI;AACb,CAAC;ACtBD,sBAAe,SAAfG,gBAAmBtL,GAAM,EAAEtI,IAAY;EAAA,OACrC,CAACO,OAAO,CAACM,GAAG,CAACyH,GAAG,EAAEtI,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC6D,MAAM,IAAIiN,KAAK,CAACxI,GAAG,EAAEtI,IAAI,CAAC;AAAA;ACAzD,gBAAe,SAAf6T,UAAgBvU,KAAc;EAAA,OAC5B6G,QAAQ,CAAC7G,KAAK,CAAC,IAAIoD,KAAK,CAACoR,cAAc,CAACxU,KAAoB,CAAC;AAAA;ACN/D,cAAe,SAAfyU,QAAgBzU,KAAc;EAAA,OAAsBA,KAAK,YAAY0U,MAAM;AAAA;SCInDC,gBAAgB,CACtChT,MAAsB,EACtBqH,GAAQ,EACS;EAAA,IAAjBrJ,IAAI,uEAAG,UAAU;EAEjB,IACE4U,SAAS,CAAC5S,MAAM,CAAC,IAChBxB,KAAK,CAACC,OAAO,CAACuB,MAAM,CAAC,IAAIA,MAAM,CAACmR,KAAK,CAACyB,SAAS,CAAE,IACjD5D,SAAS,CAAChP,MAAM,CAAC,IAAI,CAACA,MAAO,EAC9B;IACA,OAAO;MACLhC,IAAI,EAAJA,IAAI;MACJyJ,OAAO,EAAEmL,SAAS,CAAC5S,MAAM,CAAC,GAAGA,MAAM,GAAG,EAAE;MACxCqH,GAAG,EAAHA;KACD;;AAEL;AChBA,yBAAe,SAAf4L,mBAAgBC,cAA+B;EAAA,OAC7C3U,QAAQ,CAAC2U,cAAc,CAAC,IAAI,CAACJ,OAAO,CAACI,cAAc,CAAC,GAChDA,cAAc,GACd;IACE7U,KAAK,EAAE6U,cAAc;IACrBzL,OAAO,EAAE;GACV;AAAA;ACUP;EAAA,uEAAe,iBACbf,KAAY,EACZyM,UAAe,EACfjL,wBAAiC,EACjCuJ,yBAAmC;IAAA;IAAA;MAAA;QAAA;UAAA,YAgB/B/K,KAAK,CAACE,EAAE,EAbVS,GAAG,aAAHA,GAAG,EACH+B,IAAI,aAAJA,IAAI,EACJjI,QAAQ,aAARA,QAAQ,EACRH,SAAS,aAATA,SAAS,EACTC,SAAS,aAATA,SAAS,EACTF,GAAG,aAAHA,GAAG,EACHD,GAAG,aAAHA,GAAG,EACHI,OAAO,aAAPA,OAAO,EACPE,QAAQ,aAARA,QAAQ,EACRrC,IAAI,aAAJA,IAAI,EACJ4R,aAAa,aAAbA,aAAa,EACb9J,KAAK,aAALA,KAAK,EACLnD,QAAQ,aAARA,QAAQ;UAAA,MAEN,CAACmD,KAAK,IAAInD,QAAQ;YAAA;YAAA;UAAA;UAAA,iCACb,EAAE;QAAA;UAEL0P,QAAQ,GAAqBhK,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAI/B,GAAwB;UACvEgM,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAI5L,OAA0B;YAClD,IAAIgK,yBAAyB,IAAI2B,QAAQ,CAAC1L,cAAc,EAAE;cACxD0L,QAAQ,CAAC5L,iBAAiB,CAACwH,SAAS,CAACvH,OAAO,CAAC,GAAG,EAAE,GAAGA,OAAO,IAAI,GAAG,CAAC;cACpE2L,QAAQ,CAAC1L,cAAc,EAAE;;WAE5B;UACKI,KAAK,GAAwB,EAAE;UAC/BwL,OAAO,GAAGjE,YAAY,CAAChI,GAAG,CAAC;UAC3BiK,UAAU,GAAGxT,eAAe,CAACuJ,GAAG,CAAC;UACjCkM,iBAAiB,GAAGD,OAAO,IAAIhC,UAAU;UACzCkC,OAAO,GACV,CAAC7C,aAAa,IAAI1B,WAAW,CAAC5H,GAAG,CAAC,KAAK,CAACA,GAAG,CAAChJ,KAAK,IAClD8U,UAAU,KAAK,EAAE,IAChB3U,KAAK,CAACC,OAAO,CAAC0U,UAAU,CAAC,IAAI,CAACA,UAAU,CAACvQ,MAAO;UAC7C6Q,iBAAiB,GAAGxL,YAAY,CAACyL,IAAI,CACzC,IAAI,EACJ3U,IAAI,EACJmJ,wBAAwB,EACxBJ,KAAK,CACN;UACK6L,gBAAgB,GAAG,SAAnBA,gBAAgB,CACpBC,SAAkB,EAClBC,gBAAyB,EACzBC,gBAAyB,EAEiB;YAAA,IAD1CC,OAAO,uEAAGlT,sBAAsB,CAACG,SAAS;YAAA,IAC1CgT,OAAO,uEAAGnT,sBAAsB,CAACI,SAAS;YAE1C,IAAMwG,OAAO,GAAGmM,SAAS,GAAGC,gBAAgB,GAAGC,gBAAgB;YAC/DhM,KAAK,CAAC/I,IAAI,CAAC;cACTf,IAAI,EAAE4V,SAAS,GAAGG,OAAO,GAAGC,OAAO;cACnCvM,OAAO,EAAPA,OAAO;cACPJ,GAAG,EAAHA;YAAG,GACAoM,iBAAiB,CAACG,SAAS,GAAGG,OAAO,GAAGC,OAAO,EAAEvM,OAAO,CAAC,CAC7D;WACF;UAAA,MAGCtG,QAAQ,KACN,CAACoS,iBAAiB,KAAKC,OAAO,IAAIpV,iBAAiB,CAAC+U,UAAU,CAAC,CAAC,IAC/DnE,SAAS,CAACmE,UAAU,CAAC,IAAI,CAACA,UAAW,IACrC7B,UAAU,IAAI,CAACf,gBAAgB,CAACnH,IAAI,CAAC,CAACvE,OAAQ,IAC9CyO,OAAO,IAAI,CAACtC,aAAa,CAAC5H,IAAI,CAAC,CAACvE,OAAQ,CAAC;YAAA;YAAA;UAAA;UAAA,SAEjB+N,SAAS,CAACzR,QAAQ,CAAC,GAC1C;YAAE9C,KAAK,EAAE,CAAC,CAAC8C,QAAQ;YAAEsG,OAAO,EAAEtG;UAAQ,CAAE,GACxC8R,kBAAkB,CAAC9R,QAAQ,CAAC,EAFxB9C,KAAK,UAALA,KAAK,EAAEoJ,OAAO,UAAPA,OAAO;UAAA,KAIlBpJ,KAAK;YAAA;YAAA;UAAA;UACPyJ,KAAK,CAAC/I,IAAI,CAAC;YACTf,IAAI,EAAE6C,sBAAsB,CAACM,QAAQ;YACrCsG,OAAO,EAAPA,OAAO;YACPJ,GAAG,EAAE+L;UAAQ,GACVK,iBAAiB,CAAC5S,sBAAsB,CAACM,QAAQ,EAAEsG,OAAO,CAAC,CAC/D;UAAC,IACGS,wBAAwB;YAAA;YAAA;UAAA;UAC3BmL,gBAAgB,CAAC5L,OAAO,CAAC;UAAC,iCACnBK,KAAK;QAAA;UAAA,MAKd,CAAC0L,OAAO,KAAK,CAACpV,iBAAiB,CAAC2C,GAAG,CAAC,IAAI,CAAC3C,iBAAiB,CAAC0C,GAAG,CAAC,CAAC;YAAA;YAAA;UAAA;UAG5DmT,SAAS,GAAGhB,kBAAkB,CAACnS,GAAG,CAAC;UACnCoT,SAAS,GAAGjB,kBAAkB,CAAClS,GAAG,CAAC;UAEzC,IAAI,CAACiI,KAAK,CAACmK,UAAU,CAAC,EAAE;YAChBgB,WAAW,GACd9M,GAAwB,CAACsJ,aAAa,IAAIyD,UAAU,CAACjB,UAAU,CAAC;YACnE,IAAI,CAAC/U,iBAAiB,CAAC6V,SAAS,CAAC5V,KAAK,CAAC,EAAE;cACvCuV,SAAS,GAAGO,WAAW,GAAGF,SAAS,CAAC5V,KAAK;;YAE3C,IAAI,CAACD,iBAAiB,CAAC8V,SAAS,CAAC7V,KAAK,CAAC,EAAE;cACvCgW,SAAS,GAAGF,WAAW,GAAGD,SAAS,CAAC7V,KAAK;;WAE5C,MAAM;YACCiW,SAAS,GACZjN,GAAwB,CAACuJ,WAAW,IAAI,IAAIzS,IAAI,CAACgV,UAAU,CAAC;YAC/D,IAAIjO,QAAQ,CAAC+O,SAAS,CAAC5V,KAAK,CAAC,EAAE;cAC7BuV,SAAS,GAAGU,SAAS,GAAG,IAAInW,IAAI,CAAC8V,SAAS,CAAC5V,KAAK,CAAC;;YAEnD,IAAI6G,QAAQ,CAACgP,SAAS,CAAC7V,KAAK,CAAC,EAAE;cAC7BgW,SAAS,GAAGC,SAAS,GAAG,IAAInW,IAAI,CAAC+V,SAAS,CAAC7V,KAAK,CAAC;;;UAEpD,MAEGuV,SAAS,IAAIS,SAAS;YAAA;YAAA;UAAA;UACxBV,gBAAgB,CACd,CAAC,CAACC,SAAS,EACXK,SAAS,CAACxM,OAAO,EACjByM,SAAS,CAACzM,OAAO,EACjB5G,sBAAsB,CAACC,GAAG,EAC1BD,sBAAsB,CAACE,GAAG,CAC3B;UAAC,IACGmH,wBAAwB;YAAA;YAAA;UAAA;UAC3BmL,gBAAgB,CAACvL,KAAK,CAAC/I,IAAI,CAAE,CAAC0I,OAAO,CAAC;UAAC,iCAChCK,KAAK;QAAA;UAAA,MAKd,CAAC9G,SAAS,IAAIC,SAAS,KAAK,CAACuS,OAAO,IAAItO,QAAQ,CAACiO,UAAU,CAAC;YAAA;YAAA;UAAA;UACxDoB,eAAe,GAAGtB,kBAAkB,CAACjS,SAAS,CAAC;UAC/CwT,eAAe,GAAGvB,kBAAkB,CAAChS,SAAS,CAAC;UAC/C2S,UAAS,GACb,CAACxV,iBAAiB,CAACmW,eAAe,CAAClW,KAAK,CAAC,IACzC8U,UAAU,CAACvQ,MAAM,GAAG2R,eAAe,CAAClW,KAAK;UACrCgW,UAAS,GACb,CAACjW,iBAAiB,CAACoW,eAAe,CAACnW,KAAK,CAAC,IACzC8U,UAAU,CAACvQ,MAAM,GAAG4R,eAAe,CAACnW,KAAK;UAAA,MAEvCuV,UAAS,IAAIS,UAAS;YAAA;YAAA;UAAA;UACxBV,gBAAgB,CACdC,UAAS,EACTW,eAAe,CAAC9M,OAAO,EACvB+M,eAAe,CAAC/M,OAAO,CACxB;UAAC,IACGS,wBAAwB;YAAA;YAAA;UAAA;UAC3BmL,gBAAgB,CAACvL,KAAK,CAAC/I,IAAI,CAAE,CAAC0I,OAAO,CAAC;UAAC,iCAChCK,KAAK;QAAA;UAAA,MAKd5G,OAAO,IAAI,CAACsS,OAAO,IAAItO,QAAQ,CAACiO,UAAU,CAAC;YAAA;YAAA;UAAA;UAAA,sBACJF,kBAAkB,CAAC/R,OAAO,CAAC,EAArDuT,YAAY,uBAAnBpW,KAAK,EAAgBoJ,QAAO,uBAAPA,OAAO;UAAA,MAEhCqL,OAAO,CAAC2B,YAAY,CAAC,IAAI,CAACtB,UAAU,CAACuB,KAAK,CAACD,YAAY,CAAC;YAAA;YAAA;UAAA;UAC1D3M,KAAK,CAAC/I,IAAI,CAAC;YACTf,IAAI,EAAE6C,sBAAsB,CAACK,OAAO;YACpCuG,OAAO,EAAPA,QAAO;YACPJ,GAAG,EAAHA;UAAG,GACAoM,iBAAiB,CAAC5S,sBAAsB,CAACK,OAAO,EAAEuG,QAAO,CAAC,CAC9D;UAAC,IACGS,wBAAwB;YAAA;YAAA;UAAA;UAC3BmL,gBAAgB,CAAC5L,QAAO,CAAC;UAAC,iCACnBK,KAAK;QAAA;UAAA,KAKd1G,QAAQ;YAAA;YAAA;UAAA;UAAA,KACNkM,UAAU,CAAClM,QAAQ,CAAC;YAAA;YAAA;UAAA;UAAA;UAAA,OACDA,QAAQ,CAAC+R,UAAU,CAAC;QAAA;UAAnCnT,MAAM;UACN2U,aAAa,GAAG3B,gBAAgB,CAAChT,MAAM,EAAEoT,QAAQ,CAAC;UAAA,KAEpDuB,aAAa;YAAA;YAAA;UAAA;UACf7M,KAAK,CAAC/I,IAAI,CAAC,mCACN4V,aAAa,GACblB,iBAAiB,CAClB5S,sBAAsB,CAACO,QAAQ,EAC/BuT,aAAa,CAAClN,OAAO,CACtB,CACF;UAAC,IACGS,wBAAwB;YAAA;YAAA;UAAA;UAC3BmL,gBAAgB,CAACsB,aAAa,CAAClN,OAAO,CAAC;UAAC,iCACjCK,KAAK;QAAA;UAAA;UAAA;QAAA;UAAA,KAGPvJ,QAAQ,CAAC6C,QAAQ,CAAC;YAAA;YAAA;UAAA;UACvBwT,gBAAgB,GAAG,EAAgB;UAAA,yCAErBxT,QAAQ;QAAA;UAAA;YAAA;YAAA;UAAA;UAAfjB,GAAG;UAAA,MACR,CAACuC,aAAa,CAACkS,gBAAgB,CAAC,IAAI,CAAC1M,wBAAwB;YAAA;YAAA;UAAA;UAAA;QAAA;UAAA,cAI3C8K,gBAAgB;UAAA;UAAA,OAC9B5R,QAAQ,CAACjB,GAAG,CAAC,CAACgT,UAAU,CAAC;QAAA;UAAA;UAAA,cAC/BC,QAAQ;UAAA,cACRjT,GAAG;UAHCwU,cAAa;UAMnB,IAAIA,cAAa,EAAE;YACjBC,gBAAgB,mCACXD,cAAa,GACblB,iBAAiB,CAACtT,GAAG,EAAEwU,cAAa,CAAClN,OAAO,CAAC,CACjD;YAED4L,gBAAgB,CAACsB,cAAa,CAAClN,OAAO,CAAC;YAEvC,IAAIS,wBAAwB,EAAE;cAC5BJ,KAAK,CAAC/I,IAAI,CAAC,GAAG6V,gBAAgB;;;UAEjC;UAAA;QAAA;UAAA,IAGElS,aAAa,CAACkS,gBAAgB,CAAC;YAAA;YAAA;UAAA;UAClC9M,KAAK,CAAC/I,IAAI,CAAC;YACTsI,GAAG,EAAE+L;UAAQ,GACVwB,gBAAgB,CACpB;UAAC,IACG1M,wBAAwB;YAAA;YAAA;UAAA;UAAA,iCACpBJ,KAAK;QAAA;UAMpBuL,gBAAgB,CAAC,IAAI,CAAC;UAAC,iCAChBvL,KAAK;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACb;EAAA,gBAnOD+M;IAAA;EAAA;AAAA,GAmOC;ACrKD,IAAMC,cAAc,GAAG;EACrBpG,IAAI,EAAEnO,eAAe,CAACG,QAAQ;EAC9BgS,cAAc,EAAEnS,eAAe,CAACE,QAAQ;EACxCsU,gBAAgB,EAAE;CACV;AAEV,IAAMC,iBAAiB,GAAG,OAAOzF,MAAM,KAAK,WAAW;SAEvC0F,iBAAiB,GAIiB;EAAA,IAAhDnT,4EAA8C,EAAE;EAEhD,IAAIiF,QAAQ,mCACP+N,cAAc,GACdhT,KAAK,CACT;EACD,IAAIwC,UAAU,GAA4B;IACxCG,OAAO,EAAE,KAAK;IACdG,YAAY,EAAE,KAAK;IACnBF,WAAW,EAAE,EAA2C;IACxD+N,WAAW,EAAE,KAAK;IAClByC,WAAW,EAAE,CAAC;IACdvQ,aAAa,EAAE,EAA2C;IAC1DwQ,YAAY,EAAE,KAAK;IACnBC,kBAAkB,EAAE,KAAK;IACzBvQ,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;GACT;EACD,IAAI6B,OAAO,GAAG,EAAE;EAChB,IAAIN,cAAc,GAAGU,QAAQ,CAACoL,aAAa,IAAI,EAAE;EACjD,IAAIpM,WAAW,GAAGgB,QAAQ,CAACX,gBAAgB,GACvC,EAAE,GACFmH,WAAW,CAAClH,cAAc,CAAC;EAC/B,IAAIY,WAAW,GAAG;IAChBC,MAAM,EAAE,KAAK;IACbL,KAAK,EAAE,KAAK;IACZtB,KAAK,EAAE;GACR;EACD,IAAIH,MAAM,GAAU;IAClByB,KAAK,EAAE,IAAI2G,GAAG,EAAE;IAChB6H,OAAO,EAAE,IAAI7H,GAAG,EAAE;IAClBxG,KAAK,EAAE,IAAIwG,GAAG,EAAE;IAChBjI,KAAK,EAAE,IAAIiI,GAAG;GACN;EACV,IAAI8H,kBAAiC;EACrC,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,cAAc,GAAsC,EAAE;EAC1D,IAAMrT,eAAe,GAAG;IACtBsC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE,KAAK;IAClBC,aAAa,EAAE,KAAK;IACpBC,YAAY,EAAE,KAAK;IACnBC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;GACT;EACD,IAAME,SAAS,GAA2B;IACxCO,KAAK,EAAEkI,aAAa,EAAE;IACtBzG,KAAK,EAAEyG,aAAa,EAAE;IACtBxI,KAAK,EAAEwI,aAAa;GACrB;EAED,IAAMgI,0BAA0B,GAAGhH,kBAAkB,CAAC1H,QAAQ,CAAC2H,IAAI,CAAC;EACpE,IAAMgH,yBAAyB,GAAGjH,kBAAkB,CAAC1H,QAAQ,CAAC2L,cAAc,CAAC;EAC7E,IAAMiD,gCAAgC,GACpC5O,QAAQ,CAACyK,YAAY,KAAKjR,eAAe,CAACK,GAAG;EAE/C,IAAMgV,QAAQ,GACZ,SADIA,QAAQ,CACS9R,QAAW,EAAE+R,IAAY;IAAA,OAC9C,YAAa;MAAA,kCAATC,IAAS;QAATA,IAAS;MAAA;MACXC,YAAY,CAACR,KAAK,CAAC;MACnBA,KAAK,GAAGhG,MAAM,CAACyG,UAAU,CAAC;QAAA,OAAMlS,QAAQ,eAAIgS,IAAI,CAAC;MAAA,GAAED,IAAI,CAAC;KACzD;EAAA;EAEH,IAAMI,cAAc,GAAG,SAAjBA,cAAc,CAClBlX,IAA6B,EAC7ByT,WAAqB;IAAA,OAErB,CAACA,WAAW,KACXpN,MAAM,CAACO,QAAQ,IACdP,MAAM,CAACG,KAAK,CAAC2Q,GAAG,CAACnX,IAAI,CAAC,IACtBqG,MAAM,CAACG,KAAK,CAAC2Q,GAAG,CAAC,CAACnX,IAAI,CAAC2V,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;EAAA;EAEnD,IAAMrH,YAAY;IAAA,wEAAG,kBAAO8I,gBAA0B;MAAA;MAAA;QAAA;UAAA;YAChDtR,OAAO,GAAG,KAAK;YAAA,KAEf1C,eAAe,CAAC0C,OAAO;cAAA;cAAA;YAAA;YAAA,KACfkC,QAAQ,CAACqP,QAAQ;cAAA;cAAA;YAAA;YAAA,eACvB1T,aAAa;YAAA;YAAA,OAAQyK,cAAc,EAAE;UAAA;YAAA,8BAAErI,MAAM;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA,OACvCuR,wBAAwB,CAAC1P,OAAO,EAAE,IAAI,CAAC;UAAA;YAAA;UAAA;YAFjD9B,OAAO;YAIP,IAAI,CAACsR,gBAAgB,IAAItR,OAAO,KAAKP,UAAU,CAACO,OAAO,EAAE;cACvDP,UAAU,CAACO,OAAO,GAAGA,OAAO;cAC5BG,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;gBACnBgB,OAAO,EAAPA;eACD,CAAC;;UACH;YAAA,kCAGIA,OAAO;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACf;IAAA,gBAjBKwI,YAAY;MAAA;IAAA;EAAA,GAiBjB;EAED,IAAMZ,iBAAiB,GAA0B,SAA3CA,iBAAiB,CACrB1N,IAAI,EACJuX,MAAM,EACNR,IAAI,EAGkB;IAAA,IAFtBhQ,MAAM,uEAAG,EAAE;IAAA,IACXyQ,eAAe,uEAAG,IAAI;IAAA,IACtBC,eAAe,uEAAG,IAAI;IAEtBvP,WAAW,CAACC,MAAM,GAAG,IAAI;IAEzB,IAAIsP,eAAe,IAAI5W,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,CAAC,EAAE;MACzC,IAAM8G,WAAW,GAAGyQ,MAAM,CAAC1W,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,CAAC,EAAE+W,IAAI,CAACpJ,IAAI,EAAEoJ,IAAI,CAAChJ,IAAI,CAAC;MACpEyJ,eAAe,IAAI9N,GAAG,CAAC9B,OAAO,EAAE5H,IAAI,EAAE8G,WAAW,CAAC;;IAGpD,IAAIrH,KAAK,CAACC,OAAO,CAACmB,GAAG,CAAC0E,UAAU,CAACQ,MAAM,EAAE/F,IAAI,CAAC,CAAC,EAAE;MAC/C,IAAM+F,MAAM,GAAGwR,MAAM,CAAC1W,GAAG,CAAC0E,UAAU,CAACQ,MAAM,EAAE/F,IAAI,CAAC,EAAE+W,IAAI,CAACpJ,IAAI,EAAEoJ,IAAI,CAAChJ,IAAI,CAAC;MACzEyJ,eAAe,IAAI9N,GAAG,CAACnE,UAAU,CAACQ,MAAM,EAAE/F,IAAI,EAAE+F,MAAM,CAAC;MACvD6N,eAAe,CAACrO,UAAU,CAACQ,MAAM,EAAE/F,IAAI,CAAC;;IAG1C,IAAIoD,eAAe,CAACwC,aAAa,IAAI/E,GAAG,CAAC0E,UAAU,CAACK,aAAa,EAAE5F,IAAI,CAAC,EAAE;MACxE,IAAM4F,aAAa,GAAG2R,MAAM,CAC1B1W,GAAG,CAAC0E,UAAU,CAACK,aAAa,EAAE5F,IAAI,CAAC,EACnC+W,IAAI,CAACpJ,IAAI,EACToJ,IAAI,CAAChJ,IAAI,CACV;MACDyJ,eAAe,IACb9N,GAAG,CAACnE,UAAU,CAACK,aAA6B,EAAE5F,IAAI,EAAE4F,aAAa,CAAC;MACpEgO,eAAe,CAACrO,UAAU,CAACK,aAAa,EAAE5F,IAAI,CAAC;;IAGjD,IAAIoD,eAAe,CAACuC,WAAW,IAAIvC,eAAe,CAACsC,OAAO,EAAE;MAC1DgS,qBAAqB,CAAC1X,IAAI,EAAE+G,MAAM,CAAC;;IAGrCd,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;MACnBY,OAAO,EAAEiS,SAAS,CAAC3X,IAAI,EAAE+G,MAAM,CAAC;MAChCpB,WAAW,EAAEJ,UAAU,CAACI,WAAW;MACnCI,MAAM,EAAER,UAAU,CAACQ,MAAM;MACzBD,OAAO,EAAEP,UAAU,CAACO;KACrB,CAAC;GACH;EAED,IAAM8R,YAAY,GAAG,SAAfA,YAAY,CAAI5X,IAAuB,EAAE+I,KAAiB;IAAA,OAC9DW,GAAG,CAACnE,UAAU,CAACQ,MAAM,EAAE/F,IAAI,EAAE+I,KAAK,CAAC,EACnC9C,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;MACnBiB,MAAM,EAAER,UAAU,CAACQ;KACpB,CAAC;EAAA,CACH;EAED,IAAM8R,mBAAmB,GAAG,SAAtBA,mBAAmB,CACvB7X,IAAuB,EACvB8X,oBAA8B,EAC9BxP,GAAS;IAET,IAAMX,KAAK,GAAU9G,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,CAAC;IAEvC,IAAI2H,KAAK,EAAE;MACT,IAAM3G,YAAY,GAAGH,GAAG,CAACmG,WAAW,EAAEhH,IAAI,EAAEa,GAAG,CAACyG,cAAc,EAAEtH,IAAI,CAAC,CAAC;MAEtEU,WAAW,CAACM,YAAY,CAAC,IACxBsH,GAAG,IAAKA,GAAwB,CAACyP,cAAe,IACjDD,oBAAoB,GAChBpO,GAAG,CACD1C,WAAW,EACXhH,IAAI,EACJ8X,oBAAoB,GAAG9W,YAAY,GAAGmR,aAAa,CAACxK,KAAK,CAACE,EAAE,CAAC,CAC9D,GACDmQ,aAAa,CAAChY,IAAI,EAAEgB,YAAY,CAAC;;IAGvCkH,WAAW,CAACJ,KAAK,IAAIwG,YAAY,EAAE;GACpC;EAED,IAAM2J,mBAAmB,GAAG,SAAtBA,mBAAmB,CACvBjY,IAAuB,EACvBkY,UAAmB,EACnBC,gBAA0B,EACP;IAAA,IAAnBC,YAAY,uEAAG,IAAI;IAInB,IAAIC,YAAY,GAAG,KAAK;IACxB,IAAMvN,MAAM,GAAwD;MAClE9K,IAAI,EAAJA;KACD;IACD,IAAMsY,sBAAsB,GAAGzX,GAAG,CAAC0E,UAAU,CAACK,aAAa,EAAE5F,IAAI,CAAC;IAElE,IAAIoD,eAAe,CAACsC,OAAO,EAAE;MAC3B,IAAM6S,mBAAmB,GAAGhT,UAAU,CAACG,OAAO;MAE9CH,UAAU,CAACG,OAAO,GAAGoF,MAAM,CAACpF,OAAO,GAAGiS,SAAS,EAAE;MACjDU,YAAY,GAAGE,mBAAmB,KAAKzN,MAAM,CAACpF,OAAO;;IAGvD,IAAItC,eAAe,CAACuC,WAAW,IAAI,CAACwS,gBAAgB,EAAE;MACpD,IAAMK,oBAAoB,GAAG3X,GAAG,CAAC0E,UAAU,CAACI,WAAW,EAAE3F,IAAI,CAAC;MAC9D,IAAMyY,sBAAsB,GAAGxJ,SAAS,CACtCpO,GAAG,CAACyG,cAAc,EAAEtH,IAAI,CAAC,EACzBkY,UAAU,CACX;MAEDO,sBAAsB,GAClB3H,KAAK,CAACvL,UAAU,CAACI,WAAW,EAAE3F,IAAI,CAAC,GACnC0J,GAAG,CAACnE,UAAU,CAACI,WAA2B,EAAE3F,IAAI,EAAE,IAAI,CAAC;MAC3D8K,MAAM,CAACnF,WAAW,GAAGJ,UAAU,CAACI,WAAW;MAC3C0S,YAAY,GACVA,YAAY,IACZG,oBAAoB,KAAK3X,GAAG,CAAC0E,UAAU,CAACI,WAAW,EAAE3F,IAAI,CAAC;;IAG9D,IAAImY,gBAAgB,IAAI,CAACG,sBAAsB,EAAE;MAC/C5O,GAAG,CAACnE,UAAU,CAACK,aAA6B,EAAE5F,IAAI,EAAEmY,gBAAgB,CAAC;MACrErN,MAAM,CAAClF,aAAa,GAAGL,UAAU,CAACK,aAAa;MAC/CyS,YAAY,GACVA,YAAY,IACXjV,eAAe,CAACwC,aAAa,IAC5B0S,sBAAsB,KAAKH,gBAAiB;;IAGlDE,YAAY,IAAID,YAAY,IAAInS,SAAS,CAACC,KAAK,CAACpB,IAAI,CAACgG,MAAM,CAAC;IAE5D,OAAOuN,YAAY,GAAGvN,MAAM,GAAG,EAAE;GAClC;EAED,IAAM4M,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAI1X,IAAS,EAAEV,KAAU;IAAA,OAClDoK,GAAG,CACDnE,UAAU,CAACI,WAA2B,EACtC3F,IAAI,EACJuT,wBAAwB,CACtBjU,KAAK,EACLuB,GAAG,CAACyG,cAAc,EAAEtH,IAAI,EAAE,EAAE,CAAC,EAC7Ba,GAAG,CAAC0E,UAAU,CAACI,WAAW,EAAE3F,IAAI,EAAE,EAAE,CAAC,CACtC,CACF,EACD4T,eAAe,CAACrO,UAAU,CAACI,WAAW,EAAE3F,IAAI,CAAC;EAAA,CAC9C;EAED,IAAM0Y,mBAAmB;IAAA,wEAAG,kBAC1BtB,gBAAyB,EACzBpX,IAAuB,EACvB8F,OAAgB,EAChBiD,KAAkB,EAClBH,UAIC;MAAA;MAAA;QAAA;UAAA;YAEK+P,kBAAkB,GAAG9X,GAAG,CAAC0E,UAAU,CAACQ,MAAM,EAAE/F,IAAI,CAAC;YACjD4Y,iBAAiB,GACrBxV,eAAe,CAAC0C,OAAO,IAAIP,UAAU,CAACO,OAAO,KAAKA,OAAO;YAE3D,IAAI/C,KAAK,CAAC8V,UAAU,IAAI9P,KAAK,EAAE;cAC7BwN,kBAAkB,GAChBA,kBAAkB,IAAIM,QAAQ,CAACe,YAAY,EAAE7U,KAAK,CAAC8V,UAAU,CAAC;cAChEtC,kBAAkB,CAACvW,IAAI,EAAE+I,KAAK,CAAC;aAChC,MAAM;cACLiO,YAAY,CAACR,KAAK,CAAC;cACnBzN,KAAK,GACDW,GAAG,CAACnE,UAAU,CAACQ,MAAM,EAAE/F,IAAI,EAAE+I,KAAK,CAAC,GACnC+H,KAAK,CAACvL,UAAU,CAACQ,MAAM,EAAE/F,IAAI,CAAC;;YAGpC,IACE,CAAC,CAAC+I,KAAK,GAAG,CAACkG,SAAS,CAAC0J,kBAAkB,EAAE5P,KAAK,CAAC,GAAG4P,kBAAkB,KAClE,CAAChV,aAAa,CAACiF,UAAU,CAAC,IAC1BgQ,iBAAiB,KACnB,CAACxB,gBAAgB,EACjB;cACM0B,gBAAgB,iDACjBlQ,UAAU,GACTgQ,iBAAiB,GAAG;gBAAE9S,OAAO,EAAPA;cAAO,CAAE,GAAG,EAAE;gBACxCC,MAAM,EAAER,UAAU,CAACQ,MAAM;gBACzB/F,IAAI,EAAJA;cAAI,EACL;cAEDuF,UAAU,mCACLA,UAAU,GACVuT,gBAAgB,CACpB;cAED7S,SAAS,CAACC,KAAK,CAACpB,IAAI,CAACgU,gBAAgB,CAAC;;YAGxCrC,cAAc,CAACzW,IAAI,CAAC,EAAE;YAEtB,IAAIoD,eAAe,CAACyC,YAAY,IAAI,CAAC4Q,cAAc,CAACzW,IAAI,CAAC,EAAE;cACzDiG,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;gBACnBe,YAAY,EAAE;eACf,CAAC;cACF4Q,cAAc,GAAG,EAAE;;UACpB;UAAA;YAAA;QAAA;MAAA;IAAA,CACF;IAAA,gBAvDKiC,mBAAmB;MAAA;IAAA;EAAA,GAuDxB;EAED,IAAMtK,cAAc;IAAA,wEAAG,kBAAOpO,IAA0B;MAAA;QAAA;UAAA;YAAA,KACtDgI,QAAQ,CAACqP,QAAQ;cAAA;cAAA;YAAA;YAAA;YAAA,OACPrP,QAAQ,CAACqP,QAAQ,CACrB5T,kBAAKuD,WAAW,CAAqC,EACrDgB,QAAQ,CAAC+Q,OAAO,EAChBvG,kBAAkB,CAChBxS,IAAI,IAAIqG,MAAM,CAACyB,KAAK,EACpBF,OAAO,EACPI,QAAQ,CAACyK,YAAY,EACrBzK,QAAQ,CAAC0K,yBAAyB,CACnC,CACF;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA,eACA,EAAmC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;IAAA,gBAZpCtE,cAAc;MAAA;IAAA;EAAA,GAYsB;EAE1C,IAAM4K,2BAA2B;IAAA,wEAAG,kBAAO5Y,KAA2B;MAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAC3CgO,cAAc,EAAE;UAAA;YAAA;YAAjCrI,MAAM,yBAANA,MAAM;YAEd,IAAI3F,KAAK,EAAE;cAAA,wCACUA,KAAK;cAAA;gBAAxB,uDAA0B;kBAAfJ,MAAI;kBACP+I,MAAK,GAAGlI,GAAG,CAACkF,MAAM,EAAE/F,MAAI,CAAC;kBAC/B+I,MAAK,GACDW,GAAG,CAACnE,UAAU,CAACQ,MAAM,EAAE/F,MAAI,EAAE+I,MAAK,CAAC,GACnC+H,KAAK,CAACvL,UAAU,CAACQ,MAAM,EAAE/F,MAAI,CAAC;;cACnC;gBAAA;cAAA;gBAAA;cAAA;aACF,MAAM;cACLuF,UAAU,CAACQ,MAAM,GAAGA,MAAmC;;YACxD,kCAEMA,MAAM;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACd;IAAA,gBAfKiT,2BAA2B;MAAA;IAAA;EAAA,GAehC;EAED,IAAM1B,wBAAwB;IAAA,wEAAG,kBAC/BnN,MAAiB,EACjB8O,oBAA8B;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAC9BF,OAAO,8DAAG;cACRG,KAAK,EAAE;aACR;YAAA,0CAEkB/O,MAAM;UAAA;YAAA;cAAA;cAAA;YAAA;YAAdnK,MAAI;YACP2H,KAAK,GAAGwC,MAAM,CAACnK,MAAI,CAAC;YAAA,KAEtB2H,KAAK;cAAA;cAAA;YAAA;YACDwR,cAAc,GAAGxR,KAAK,CAACE,EAAE;YACzBqQ,UAAU,GAAG5V,IAAI,CAACqF,KAAK,EAAE,IAAI,CAAC;YAAA,KAEhCwR,cAAc;cAAA;cAAA;YAAA;YAAA;YAAA,OACSrD,aAAa,CACpCnO,KAAK,EACL9G,GAAG,CAACmG,WAAW,EAAEmS,cAAc,CAACnZ,IAAI,CAAC,EACrC4W,gCAAgC,EAChC5O,QAAQ,CAAC0K,yBAAyB,CACnC;UAAA;YALK0G,UAAU;YAAA,KAOZA,UAAU,CAACD,cAAc,CAACnZ,IAAI,CAAC;cAAA;cAAA;YAAA;YACjC+Y,OAAO,CAACG,KAAK,GAAG,KAAK;YAAC,KAElBD,oBAAoB;cAAA;cAAA;YAAA;YAAA;UAAA;YAK1B,IAAI,CAACA,oBAAoB,EAAE;cACzBG,UAAU,CAACD,cAAc,CAACnZ,IAAI,CAAC,GAC3B0J,GAAG,CACDnE,UAAU,CAACQ,MAAM,EACjBoT,cAAc,CAACnZ,IAAI,EACnBoZ,UAAU,CAACD,cAAc,CAACnZ,IAAI,CAAC,CAChC,GACD8Q,KAAK,CAACvL,UAAU,CAACQ,MAAM,EAAEoT,cAAc,CAACnZ,IAAI,CAAC;;UAClD;YAAA,eAGHkY,UAAU;YAAA;cAAA;cAAA;YAAA;YAAA;YAAA,OACDZ,wBAAwB,CAC7BY,UAAU,EACVe,oBAAoB,EACpBF,OAAO,CACR;UAAA;YAAA;YAAA;UAAA;YAAA,kCAIAA,OAAO,CAACG,KAAK;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACrB;IAAA,gBAnDK5B,wBAAwB;MAAA;IAAA;EAAA,GAmD7B;EAED,IAAMnQ,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAG;IAAA,4CACJd,MAAM,CAACiQ,OAAO;MAAA;IAAA;MAAjC,uDAAmC;QAAA,IAAxBtW,MAAI;QACb,IAAM2H,KAAK,GAAU9G,GAAG,CAAC+G,OAAO,EAAE5H,MAAI,CAAC;QAEvC2H,KAAK,KACFA,KAAK,CAACE,EAAE,CAACwC,IAAI,GACV1C,KAAK,CAACE,EAAE,CAACwC,IAAI,CAAC+H,KAAK,CAAC,UAAC9J,GAAG;UAAA,OAAK,CAACoI,IAAI,CAACpI,GAAG,CAAC;QAAA,EAAC,GACxC,CAACoI,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACS,GAAG,CAAC,CAAC,IACxBF,UAAU,CAACpI,MAA+B,CAAC;;IAC9C;MAAA;IAAA;MAAA;IAAA;IAEDqG,MAAM,CAACiQ,OAAO,GAAG,IAAI7H,GAAG,EAAE;GAC3B;EAED,IAAMkJ,SAAS,GAAe,SAAxBA,SAAS,CAAgB3X,IAAI,EAAEb,IAAI;IAAA,OACvCa,IAAI,IAAIb,IAAI,IAAIuK,GAAG,CAAC1C,WAAW,EAAEhH,IAAI,EAAEb,IAAI,CAAC,EAC5C,CAAC8P,SAAS,CAACoK,SAAS,EAAE,EAAE/R,cAAc,CAAC;EAAA,CACxC;EAED,IAAMJ,SAAS,GAAgC,SAAzCA,SAAS,CACb9G,KAAK,EACLY,YAAY,EACZuF,QAAQ;IAER,IAAMO,WAAW,qBACXoB,WAAW,CAACJ,KAAK,GACjBd,WAAW,GACXtG,WAAW,CAACM,YAAY,CAAC,GACzBsG,cAAc,GACdnB,QAAQ,CAAC/F,KAAK,CAAC,uBACZA,KAAK,EAAGY,YAAY,IACvBA,YAAY,CACjB;IAED,OAAOoF,mBAAmB,CAAChG,KAAK,EAAEiG,MAAM,EAAES,WAAW,EAAEP,QAAQ,CAAC;GACjE;EAED,IAAMyG,cAAc,GAAG,SAAjBA,cAAc,CAAIhN,IAAuB;IAAA,OAC7Ca,GAAG,CACDqH,WAAW,CAACJ,KAAK,GAAGd,WAAW,GAAGM,cAAc,EAChDtH,IAAI,EACJ+C,KAAK,CAACsE,gBAAgB,GAAGxG,GAAG,CAACyG,cAAc,EAAEtH,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,CAC5D;EAAA;EAEH,IAAMgY,aAAa,GAAG,SAAhBA,aAAa,CACjBhY,IAAuB,EACvBV,KAAkC,EACN;IAAA,IAA5BiL,8EAA0B,EAAE;IAE5B,IAAM5C,KAAK,GAAU9G,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,CAAC;IACvC,IAAIkY,UAAU,GAAY5Y,KAAK;IAE/B,IAAIqI,KAAK,EAAE;MACT,IAAMwR,cAAc,GAAGxR,KAAK,CAACE,EAAE;MAE/B,IAAIsR,cAAc,EAAE;QAClBzP,GAAG,CAAC1C,WAAW,EAAEhH,IAAI,EAAE2R,eAAe,CAACrS,KAAK,EAAE6Z,cAAc,CAAC,CAAC;QAE9DjB,UAAU,GACRoB,KAAK,IAAInJ,aAAa,CAACgJ,cAAc,CAAC7Q,GAAG,CAAC,IAAIjJ,iBAAiB,CAACC,KAAK,CAAC,GAClE,EAAE,GACFA,KAAK;QAEX,IAAI4Q,WAAW,CAACiJ,cAAc,CAAC7Q,GAAG,CAAC,IAAI,CAACnC,QAAQ,CAAC+R,UAAU,CAAC,EAAE;UAC5DiB,cAAc,CAAC7Q,GAAG,CAAC+J,KAAK,GAAG6F,UAAsB;SAClD,MAAM,IAAI7H,gBAAgB,CAAC8I,cAAc,CAAC7Q,GAAG,CAAC,EAAE;UAC/C,mBAAI6Q,cAAc,CAAC7Q,GAAG,CAACiC,OAAO,EAAEgP,OAAO,CACrC,UAACC,SAAS;YAAA,OACPA,SAAS,CAACC,QAAQ,GACjBvB,UACD,CAAC1I,QAAQ,CAACgK,SAAS,CAACla,KAAK,CAAC;UAAA,CAAC,CAC/B;SACF,MAAM,IAAI6Z,cAAc,CAAC9O,IAAI,EAAE;UAC9B,IAAItL,eAAe,CAACoa,cAAc,CAAC7Q,GAAG,CAAC,EAAE;YACvC6Q,cAAc,CAAC9O,IAAI,CAACxG,MAAM,GAAG,CAAC,GAC1BsV,cAAc,CAAC9O,IAAI,CAACkP,OAAO,CACzB,UAACG,WAAW;cAAA,OACTA,WAAW,CAAC5Z,OAAO,GAAGL,KAAK,CAACC,OAAO,CAACwY,UAAU,CAAC,GAC5C,CAAC,CAAEA,UAAiB,CAAClU,IAAI,CACvB,UAAC7E,IAAY;gBAAA,OAAKA,IAAI,KAAKua,WAAW,CAACpa,KAAK;cAAA,EAC7C,GACD4Y,UAAU,KAAKwB,WAAW,CAACpa,KAAK;YAAA,CAAC,CACxC,GACA6Z,cAAc,CAAC9O,IAAI,CAAC,CAAC,CAAC,CAACvK,OAAO,GAAG,CAAC,CAACoY,UAAW;WACpD,MAAM;YACLiB,cAAc,CAAC9O,IAAI,CAACkP,OAAO,CACzB,UAACI,QAA0B;cAAA,OACxBA,QAAQ,CAAC7Z,OAAO,GAAG6Z,QAAQ,CAACra,KAAK,KAAK4Y,UAAU;YAAA,CAAC,CACrD;;SAEJ,MAAM;UACLiB,cAAc,CAAC7Q,GAAG,CAAChJ,KAAK,GAAG4Y,UAAU;;;;IAK3C,CAAC3N,OAAO,CAACqP,WAAW,IAAIrP,OAAO,CAACsP,WAAW,KACzC5B,mBAAmB,CAACjY,IAAI,EAAEkY,UAAU,EAAE3N,OAAO,CAACsP,WAAW,CAAC;IAE5DtP,OAAO,CAACuP,cAAc,IAAIC,OAAO,CAAC/Z,IAA0B,CAAC;GAC9D;EAED,IAAMga,SAAS,GAAG,SAAZA,SAAS,CACbha,IAA6B,EAC7BV,KAA0E,EAC1EiL,OAAuB;IAEvB,KAAK,IAAM0P,QAAQ,IAAI3a,KAAK,EAAE;MAC5B,IAAM4Y,UAAU,GAAgC5Y,KAAK,CAAC2a,QAAQ,CAAC;MAC/D,IAAMtT,SAAS,aAAM3G,IAAI,cAAIia,QAAQ,CAAwB;MAC7D,IAAMtS,KAAK,GAAG9G,GAAG,CAAC+G,OAAO,EAAEjB,SAAS,CAAC;MAErC,CAACN,MAAM,CAAC4B,KAAK,CAACkP,GAAG,CAACnX,IAAI,CAAC,IACrB,CAACgP,WAAW,CAACkJ,UAAU,CAAC,IACvBvQ,KAAK,IAAI,CAACA,KAAK,CAACE,EAAG,KACtB,CAAC3I,YAAY,CAACgZ,UAAU,CAAC,GACrB8B,SAAS,CAACrT,SAAS,EAAEuR,UAAU,EAAE3N,OAAO,CAAC,GACzCyN,aAAa,CAACrR,SAAS,EAAEuR,UAAU,EAAE3N,OAAO,CAAC;;GAEpD;EAED,IAAM2P,QAAQ,GAAkC,SAA1CA,QAAQ,CACZla,IAAI,EACJV,KAAK,EACO;IAAA,IAAZiL,OAAO,uEAAG,EAAE;IAEZ,IAAM5C,KAAK,GAAG9G,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,CAAC;IAChC,IAAMma,YAAY,GAAG9T,MAAM,CAAC4B,KAAK,CAACkP,GAAG,CAACnX,IAAI,CAAC;IAE3C0J,GAAG,CAAC1C,WAAW,EAAEhH,IAAI,EAAEV,KAAK,CAAC;IAE7B,IAAI6a,YAAY,EAAE;MAChBlU,SAAS,CAACgC,KAAK,CAACnD,IAAI,CAAC;QACnB9E,IAAI,EAAJA,IAAI;QACJ+G,MAAM,EAAEC;OACT,CAAC;MAEF,IACE,CAAC5D,eAAe,CAACsC,OAAO,IAAItC,eAAe,CAACuC,WAAW,KACvD4E,OAAO,CAACqP,WAAW,EACnB;QACAlC,qBAAqB,CAAC1X,IAAI,EAAEV,KAAK,CAAC;QAElC2G,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;UACnB9E,IAAI,EAAJA,IAAI;UACJ2F,WAAW,EAAEJ,UAAU,CAACI,WAAW;UACnCD,OAAO,EAAEiS,SAAS,CAAC3X,IAAI,EAAEV,KAAK;SAC/B,CAAC;;KAEL,MAAM;MACLqI,KAAK,IAAI,CAACA,KAAK,CAACE,EAAE,IAAI,CAACxI,iBAAiB,CAACC,KAAK,CAAC,GAC3C0a,SAAS,CAACha,IAAI,EAAEV,KAAK,EAAEiL,OAAO,CAAC,GAC/ByN,aAAa,CAAChY,IAAI,EAAEV,KAAK,EAAEiL,OAAO,CAAC;;IAGzC2M,cAAc,CAAClX,IAAI,CAAC,IAAIiG,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC,EAAE,CAAC;IAChDmB,SAAS,CAACO,KAAK,CAAC1B,IAAI,CAAC;MACnB9E,IAAI,EAAJA;KACD,CAAC;GACH;EAED,IAAMoa,YAAY;IAAA,wEAAkB,kBAAOxa,KAAK;MAAA;MAAA;QAAA;UAAA;YACxCC,MAAM,GAAGD,KAAK,CAACC,MAAM;YACvBG,IAAI,GAAGH,MAAM,CAACG,IAAI;YAChB2H,KAAK,GAAU9G,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,CAAC;YAAA,KAEnC2H,KAAK;cAAA;cAAA;YAAA;YAGDuQ,UAAU,GAAGrY,MAAM,CAACZ,IAAI,GAAGkT,aAAa,CAACxK,KAAK,CAACE,EAAE,CAAC,GAAGhI,MAAM,CAACP,KAAK;YACjEmU,WAAW,GAAG7T,KAAK,CAACX,IAAI,KAAKoC,MAAM,CAACC,IAAI;YACxC+Y,oBAAoB,GACvB,CAAC1H,aAAa,CAAChL,KAAK,CAACE,EAAE,CAAC,IACvB,CAACG,QAAQ,CAACqP,QAAQ,IAClB,CAACxW,GAAG,CAAC0E,UAAU,CAACQ,MAAM,EAAE/F,IAAI,CAAC,IAC7B,CAAC2H,KAAK,CAACE,EAAE,CAACyS,IAAI,IAChB9G,cAAc,CACZC,WAAW,EACX5S,GAAG,CAAC0E,UAAU,CAACK,aAAa,EAAE5F,IAAI,CAAC,EACnCuF,UAAU,CAACmO,WAAW,EACtBiD,yBAAyB,EACzBD,0BAA0B,CAC3B;YACG6D,SAAS,GAAGrD,cAAc,CAAClX,IAAI,EAAEyT,WAAW,CAAC;YAEnD,IAAIA,WAAW,EAAE;cACf9L,KAAK,CAACE,EAAE,CAACpG,MAAM,IAAIkG,KAAK,CAACE,EAAE,CAACpG,MAAM,CAAC7B,KAAK,CAAC;aAC1C,MAAM,IAAI+H,KAAK,CAACE,EAAE,CAACnG,QAAQ,EAAE;cAC5BiG,KAAK,CAACE,EAAE,CAACnG,QAAQ,CAAC9B,KAAK,CAAC;;YAG1B8J,GAAG,CAAC1C,WAAW,EAAEhH,IAAI,EAAEkY,UAAU,CAAC;YAE5BtP,UAAU,GAAGqP,mBAAmB,CACpCjY,IAAI,EACJkY,UAAU,EACVzE,WAAW,EACX,KAAK,CACN;YAEK2E,YAAY,GAAG,CAACzU,aAAa,CAACiF,UAAU,CAAC,IAAI2R,SAAS;YAE5D,CAAC9G,WAAW,IACVxN,SAAS,CAACO,KAAK,CAAC1B,IAAI,CAAC;cACnB9E,IAAI,EAAJA,IAAI;cACJf,IAAI,EAAEW,KAAK,CAACX;aACb,CAAC;YAAC,KAEDob,oBAAoB;cAAA;cAAA;YAAA;YAAA,kCAEpBjC,YAAY,IACZnS,SAAS,CAACC,KAAK,CAACpB,IAAI;cAAG9E,IAAI,EAAJA;YAAI,GAAMua,SAAS,GAAG,EAAE,GAAG3R,UAAU,EAAI;UAAA;YAIpE,CAAC6K,WAAW,IAAI8G,SAAS,IAAItU,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC,EAAE,CAAC;YAErD2R,cAAc,CAACzW,IAAI,CAAC,GAAGyW,cAAc,CAACzW,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;YAEpDoD,eAAe,CAACyC,YAAY,IAC1BI,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;cACnBe,YAAY,EAAE;aACf,CAAC;YAAC,KAEDmC,QAAQ,CAACqP,QAAQ;cAAA;cAAA;YAAA;YAAA;YAAA,OACMjJ,cAAc,CAAC,CAACpO,IAAI,CAAC,CAAC;UAAA;YAAA;YAAvC+F,MAAM,0BAANA,MAAM;YACRyU,yBAAyB,GAAG5H,iBAAiB,CACjDrN,UAAU,CAACQ,MAAM,EACjB6B,OAAO,EACP5H,IAAI,CACL;YACKya,iBAAiB,GAAG7H,iBAAiB,CACzC7M,MAAM,EACN6B,OAAO,EACP4S,yBAAyB,CAACxa,IAAI,IAAIA,IAAI,CACvC;YAED+I,OAAK,GAAG0R,iBAAiB,CAAC1R,KAAK;YAC/B/I,IAAI,GAAGya,iBAAiB,CAACza,IAAI;YAE7B8F,OAAO,GAAGnC,aAAa,CAACoC,MAAM,CAAC;YAAC;YAAA;UAAA;YAAA;YAAA,OAGxB+P,aAAa,CACjBnO,KAAK,EACL9G,GAAG,CAACmG,WAAW,EAAEhH,IAAI,CAAU,EAC/B4W,gCAAgC,EAChC5O,QAAQ,CAAC0K,yBAAyB,CACnC;UAAA;YAAA,eACD1S,IAAI;YAPN+I,OAAK;YAAA;YAAA,OASWuF,YAAY,CAAC,IAAI,CAAC;UAAA;YAAlCxI,OAAO;UAAA;YAGT6B,KAAK,CAACE,EAAE,CAACyS,IAAI,IAAIP,OAAO,CAACpS,KAAK,CAACE,EAAE,CAACyS,IAAiC,CAAC;YAEpE5B,mBAAmB,CAAC,KAAK,EAAE1Y,IAAI,EAAE8F,OAAO,EAAEiD,OAAK,EAAEH,UAAU,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CAEhE;IAAA,gBAjGKwR,YAAY;MAAA;IAAA;EAAA,GAiGjB;EAED,IAAML,OAAO;IAAA,wEAAiC,kBAAO/Z,IAAI;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAEuK,OAAO,8DAAG,EAAE;YAG/DmQ,UAAU,GAAGzW,qBAAqB,CAACjE,IAAI,CAAwB;YAErEiG,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;cACnBe,YAAY,EAAE;aACf,CAAC;YAAC,KAECmC,QAAQ,CAACqP,QAAQ;cAAA;cAAA;YAAA;YAAA;YAAA,OACE2B,2BAA2B,CAC9CtY,WAAW,CAACV,IAAI,CAAC,GAAGA,IAAI,GAAG0a,UAAU,CACtC;UAAA;YAFK3U,MAAM;YAIZD,OAAO,GAAGnC,aAAa,CAACoC,MAAM,CAAC;YAC/B8P,gBAAgB,GAAG7V,IAAI,GACnB,CAAC0a,UAAU,CAACra,IAAI,CAAC,UAACL,IAAI;cAAA,OAAKa,GAAG,CAACkF,MAAM,EAAE/F,IAAI,CAAC;YAAA,EAAC,GAC7C8F,OAAO;YAAC;YAAA;UAAA;YAAA,KACH9F,IAAI;cAAA;cAAA;YAAA;YAAA;YAAA,OAEL2a,OAAO,CAAC9Y,GAAG,CACf6Y,UAAU,CAAChU,GAAG;cAAA,wEAAC,kBAAOC,SAAS;gBAAA;gBAAA;kBAAA;oBAAA;sBACvBgB,KAAK,GAAG9G,GAAG,CAAC+G,OAAO,EAAEjB,SAAS,CAAC;sBAAA;sBAAA,OACxB2Q,wBAAwB,CACnC3P,KAAK,IAAIA,KAAK,CAACE,EAAE,uBAAMlB,SAAS,EAAGgB,KAAK,IAAKA,KAAK,CACnD;oBAAA;sBAAA;oBAAA;oBAAA;sBAAA;kBAAA;gBAAA;cAAA,CACF;cAAA;gBAAA;cAAA;YAAA,IAAC,CACH;UAAA;YARHkO,gBAAgB,kBASdzD,KAAK,CAAC3R,OAAO;YACf,EAAE,CAACoV,gBAAgB,IAAI,CAACtQ,UAAU,CAACO,OAAO,CAAC,IAAIwI,YAAY,EAAE;YAAC;YAAA;UAAA;YAAA;YAAA,OAE3BgJ,wBAAwB,CAAC1P,OAAO,CAAC;UAAA;YAApEiO,gBAAgB,GAAG/P,OAAO;UAAA;YAG5BG,SAAS,CAACC,KAAK,CAACpB,IAAI,+CACd,CAACqB,QAAQ,CAACnG,IAAI,CAAC,IAClBoD,eAAe,CAAC0C,OAAO,IAAIA,OAAO,KAAKP,UAAU,CAACO,OAAQ,GACvD,EAAE,GACF;cAAE9F,IAAI,EAAJA;YAAI,CAAE,GACRgI,QAAQ,CAACqP,QAAQ,GAAG;cAAEvR,OAAO,EAAPA;YAAO,CAAE,GAAG,EAAE;cACxCC,MAAM,EAAER,UAAU,CAACQ,MAAM;cACzBF,YAAY,EAAE;YAAK,GACnB;YAEF0E,OAAO,CAACC,WAAW,IACjB,CAACqL,gBAAgB,IACjB3L,YAAY,CACVtC,OAAO,EACP,UAACxG,GAAG;cAAA,OAAKP,GAAG,CAAC0E,UAAU,CAACQ,MAAM,EAAE3E,GAAG,CAAC;YAAA,GACpCpB,IAAI,GAAG0a,UAAU,GAAGrU,MAAM,CAACyB,KAAK,CACjC;YAAC,kCAEG+N,gBAAgB;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACxB;IAAA,gBArDKkE,OAAO;MAAA;IAAA;EAAA,GAqDZ;EAED,IAAMV,SAAS,GAAmC,SAA5CA,SAAS,CACbqB,UAE0C;IAE1C,IAAM3T,MAAM,mCACPO,cAAc,GACbY,WAAW,CAACJ,KAAK,GAAGd,WAAW,GAAG,EAAE,CACzC;IAED,OAAOtG,WAAW,CAACga,UAAU,CAAC,GAC1B3T,MAAM,GACNZ,QAAQ,CAACuU,UAAU,CAAC,GACpB7Z,GAAG,CAACkG,MAAM,EAAE2T,UAA+B,CAAC,GAC5CA,UAAU,CAAChU,GAAG,CAAC,UAAC1G,IAAI;MAAA,OAAKa,GAAG,CAACkG,MAAM,EAAE/G,IAAyB,CAAC;IAAA,EAAC;GACrE;EAED,IAAM4a,WAAW,GAAqC,SAAhDA,WAAW,CAAsC5a,IAAI;IACzDA,IAAI,GACAiE,qBAAqB,CAACjE,IAAI,CAAC,CAACuZ,OAAO,CAAC,UAACsB,SAAS;MAAA,OAC5C/J,KAAK,CAACvL,UAAU,CAACQ,MAAM,EAAE8U,SAAS,CAAC;IAAA,EACpC,GACAtV,UAAU,CAACQ,MAAM,GAAG,EAAgC;IAEzDE,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;MACnBiB,MAAM,EAAER,UAAU,CAACQ,MAAM;MACzBD,OAAO,EAAE;KACV,CAAC;GACH;EAED,IAAMgV,QAAQ,GAAkC,SAA1CA,QAAQ,CAAmC9a,IAAI,EAAE+I,KAAK,EAAEwB,OAAO;IACnE,IAAMjC,GAAG,GAAG,CAAEzH,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,EAAE;MAAE6H,EAAE,EAAE;IAAE,CAAE,CAAW,CAACA,EAAE,IAAI,EAAE,EAAES,GAAG;IAEpEoB,GAAG,CAACnE,UAAU,CAACQ,MAAM,EAAE/F,IAAI,kCACtB+I,KAAK;MACRT,GAAG,EAAHA;IAAG,GACH;IAEFrC,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;MACnB9E,IAAI,EAAJA,IAAI;MACJ+F,MAAM,EAAER,UAAU,CAACQ,MAAM;MACzBD,OAAO,EAAE;KACV,CAAC;IAEFyE,OAAO,IAAIA,OAAO,CAACC,WAAW,IAAIlC,GAAG,IAAIA,GAAG,CAACE,KAAK,IAAIF,GAAG,CAACE,KAAK,EAAE;GAClE;EAED,IAAMhC,KAAK,GAA+B,SAApCA,KAAK,CACTxG,IAG+B,EAC/BgB,YAAsB;IAAA,OAEtBuN,UAAU,CAACvO,IAAI,CAAC,GACZiG,SAAS,CAACO,KAAK,CAAC3B,SAAS,CAAC;MACxBC,IAAI,EAAE,cAACiW,IAAS;QAAA,OACd/a,IAAI,CACFkH,SAAS,CACPtG,SAAS,EACTI,YAA4D,CAC7D,EACD+Z,IAAI,CACL;MAAA;KACJ,CAAC,GACF7T,SAAS,CACPlH,IAA+C,EAC/CgB,YAA4D,EAC5D,IAAI,CACL;EAAA;EAEP,IAAMoH,UAAU,GAAoC,SAA9CA,UAAU,CAAqCpI,IAAI,EAAc;IAAA,IAAZuK,OAAO,uEAAG,EAAE;IAAA,4CAC7CvK,IAAI,GAAGiE,qBAAqB,CAACjE,IAAI,CAAC,GAAGqG,MAAM,CAACyB,KAAK;MAAA;IAAA;MAAzE,uDAA2E;QAAA,IAAhEnB,SAAS;QAClBN,MAAM,CAACyB,KAAK,CAACkT,MAAM,CAACrU,SAAS,CAAC;QAC9BN,MAAM,CAAC4B,KAAK,CAAC+S,MAAM,CAACrU,SAAS,CAAC;QAE9B,IAAI9F,GAAG,CAAC+G,OAAO,EAAEjB,SAAS,CAAC,EAAE;UAC3B,IAAI,CAAC4D,OAAO,CAAC0Q,SAAS,EAAE;YACtBnK,KAAK,CAAClJ,OAAO,EAAEjB,SAAS,CAAC;YACzBmK,KAAK,CAAC9J,WAAW,EAAEL,SAAS,CAAC;;UAG/B,CAAC4D,OAAO,CAAC2Q,SAAS,IAAIpK,KAAK,CAACvL,UAAU,CAACQ,MAAM,EAAEY,SAAS,CAAC;UACzD,CAAC4D,OAAO,CAAC4Q,SAAS,IAAIrK,KAAK,CAACvL,UAAU,CAACI,WAAW,EAAEgB,SAAS,CAAC;UAC9D,CAAC4D,OAAO,CAAC6Q,WAAW,IAAItK,KAAK,CAACvL,UAAU,CAACK,aAAa,EAAEe,SAAS,CAAC;UAClE,CAACqB,QAAQ,CAACX,gBAAgB,IACxB,CAACkD,OAAO,CAAClC,gBAAgB,IACzByI,KAAK,CAACxJ,cAAc,EAAEX,SAAS,CAAC;;;IAErC;MAAA;IAAA;MAAA;IAAA;IAEDV,SAAS,CAACO,KAAK,CAAC1B,IAAI,CAAC,EAAE,CAAC;IAExBmB,SAAS,CAACC,KAAK,CAACpB,IAAI,iCACfS,UAAU,GACT,CAACgF,OAAO,CAAC4Q,SAAS,GAAG,EAAE,GAAG;MAAEzV,OAAO,EAAEiS,SAAS;IAAE,CAAE,EACtD;IAEF,CAACpN,OAAO,CAAC8Q,WAAW,IAAI/M,YAAY,EAAE;GACvC;EAED,IAAM9G,QAAQ,GAAkC,SAA1CA,QAAQ,CAAmCxH,IAAI,EAAc;IAAA,IAAZuK,OAAO,uEAAG,EAAE;IACjE,IAAM5C,KAAK,GAAG9G,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,CAAC;IAEhC0J,GAAG,CAAC9B,OAAO,EAAE5H,IAAI,EAAE;MACjB6H,EAAE,gDACIF,KAAK,IAAIA,KAAK,CAACE,EAAE,GAAGF,KAAK,CAACE,EAAE,GAAG;QAAES,GAAG,EAAE;UAAEtI,IAAI,EAAJA;QAAI;MAAE,CAAE;QACpDA,IAAI,EAAJA,IAAI;QACJ8H,KAAK,EAAE;MAAI,IACRyC,OAAO;KAEb,CAAC;IACFlE,MAAM,CAACyB,KAAK,CAACrB,GAAG,CAACzG,IAAI,CAAC;IAEtB,CAACU,WAAW,CAAC6J,OAAO,CAACjL,KAAK,CAAC,IACzB,CAACiL,OAAO,CAAC5F,QAAQ,IACjB+E,GAAG,CAAC1C,WAAW,EAAEhH,IAAI,EAAEa,GAAG,CAACmG,WAAW,EAAEhH,IAAI,EAAEuK,OAAO,CAACjL,KAAK,CAAC,CAAC;IAE/DqI,KAAK,GACDsI,SAAS,CAAC1F,OAAO,CAAC5F,QAAQ,CAAC,IAC3B+E,GAAG,CACD1C,WAAW,EACXhH,IAAI,EACJuK,OAAO,CAAC5F,QAAQ,GACZ/D,SAAS,GACTC,GAAG,CAACmG,WAAW,EAAEhH,IAAI,EAAEmS,aAAa,CAACxK,KAAK,CAACE,EAAE,CAAC,CAAC,CACpD,GACDgQ,mBAAmB,CAAC7X,IAAI,EAAE,IAAI,CAAC;IAEnC,OAAOiW,iBAAiB,GACnB;MAAEjW,IAAI,EAAEA;IAAyB,CAA4B;MAE5DA,IAAI,EAAJA;IAAI,GACAiQ,SAAS,CAAC1F,OAAO,CAAC5F,QAAQ,CAAC,GAC3B;MAAEA,QAAQ,EAAE4F,OAAO,CAAC5F;IAAQ,CAAE,GAC9B,EAAE;MACNjD,QAAQ,EAAE0Y,YAAY;MACtB3Y,MAAM,EAAE2Y,YAAY;MACpB9R,GAAG;QAAA;UAAA;QAAA;QAAA;UAAA;QAAA;QAAA;MAAA,EAAE,UAACA,GAA4B;QAChC,IAAIA,GAAG,EAAE;UACPd,QAAQ,CAACxH,IAAI,EAAEuK,OAAO,CAAC;UACvB,IAAI5C,MAAK,GAAU9G,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,CAAC;UACrC,IAAMsb,QAAQ,GAAG5a,WAAW,CAAC4H,GAAG,CAAChJ,KAAK,CAAC,GACnCgJ,GAAG,CAACiT,gBAAgB,GACjBjT,GAAG,CAACiT,gBAAgB,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAS,IACzDjT,GAAG,GACHA,GAAG,GACLA,GAAG;UAEP,IAAMkM,iBAAiB,GAAGjE,yBAAyB,CAAC+K,QAAQ,CAAC;UAE7D,IACEA,QAAQ,KAAK3T,MAAK,CAACE,EAAE,CAACS,GAAG,IACxBkM,iBAAiB,IAChBjU,OAAO,CAACoH,MAAK,CAACE,EAAE,CAACwC,IAAI,IAAI,EAAE,CAAC,CAACrG,IAAI,CAC/B,UAACyN,MAAM;YAAA,OAAKA,MAAM,KAAK6J,QAAQ;UAAA,EAC/B,EACJ;YACA;;UAGF3T,MAAK,GAAG;YACNE,EAAE,EAAE2M,iBAAiB,mCAEZ7M,MAAK,CAACE,EAAE;cACXwC,IAAI,+BACC9J,OAAO,CAACoH,MAAK,CAACE,EAAE,CAACwC,IAAI,IAAI,EAAE,CAAC,CAAC7J,MAAM,CAACkQ,IAAI,CAAC,IAC5C4K,QAAQ,EACT;cACDhT,GAAG,EAAE;gBAAErJ,IAAI,EAAEqc,QAAQ,CAACrc,IAAI;gBAAEe,IAAI,EAAJA;cAAI;YAAE,qCAG/B2H,MAAK,CAACE,EAAE;cACXS,GAAG,EAAEgT;YAAQ;WAEpB;UAED5R,GAAG,CAAC9B,OAAO,EAAE5H,IAAI,EAAE2H,MAAK,CAAC;UAEzB,CAAC,CAAC4C,OAAO,IAAI,CAACA,OAAO,CAAC5F,QAAQ,KAC5BkT,mBAAmB,CAAC7X,IAAI,EAAE,KAAK,EAAEsb,QAAQ,CAAC;SAC7C,MAAM;UACL,IAAM3T,OAAK,GAAU9G,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,EAAE,EAAE,CAAC;UAC3C,IAAMqH,gBAAgB,GACpBW,QAAQ,CAACX,gBAAgB,IAAIkD,OAAO,CAAClD,gBAAgB;UAEvD,IAAIM,OAAK,CAACE,EAAE,EAAE;YACZF,OAAK,CAACE,EAAE,CAACC,KAAK,GAAG,KAAK;;UAGxBT,gBAAgB,IACd,EACElH,kBAAkB,CAACkG,MAAM,CAAC4B,KAAK,EAAEjI,IAAI,CAAC,IAAIkI,WAAW,CAACC,MAAM,CAC7D,IACD9B,MAAM,CAACiQ,OAAO,CAAC7P,GAAG,CAACzG,IAAI,CAAC;;OAE7B;IAAA,EACF;GACN;EAED,IAAMwb,YAAY,GAChB,SADIA,YAAY,CACfC,OAAO,EAAEC,SAAS;IAAA;MAAA,wEAAK,mBAAOC,CAAC;QAAA;QAAA;UAAA;YAAA;cAC9B,IAAIA,CAAC,EAAE;gBACLA,CAAC,CAACC,cAAc,IAAID,CAAC,CAACC,cAAc,EAAE;gBACtCD,CAAC,CAACE,OAAO,IAAIF,CAAC,CAACE,OAAO,EAAE;;cAEtBC,iBAAiB,GAAG,IAAI;cACxBhV,WAAW,GAAQkB,QAAQ,CAACX,gBAAgB,GAC5CmH,WAAW,CAACxH,WAAW,CAAC,qBACnBA,WAAW,CAAE;cAEtBf,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;gBACnBsR,YAAY,EAAE;eACf,CAAC;cAAC;cAAA,KAGGpO,QAAQ,CAACqP,QAAQ;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACcjJ,cAAc,EAAE;YAAA;cAAA;cAAzCrI,MAAM,0BAANA,MAAM;cAAEgB,MAAM,0BAANA,MAAM;cACtBxB,UAAU,CAACQ,MAAM,GAAGA,MAAmC;cACvDe,WAAW,GAAGC,MAAM;cAAC;cAAA;YAAA;cAAA;cAAA,OAEfuQ,wBAAwB,CAAC1P,OAAO,CAAC;YAAA;cAAA,MAIvCjE,aAAa,CAAC4B,UAAU,CAACQ,MAAM,CAAC,IAChCtC,MAAM,CAACG,IAAI,CAAC2B,UAAU,CAACQ,MAAM,CAAC,CAACqM,KAAK,CAAC,UAACpS,IAAI;gBAAA,OAAKa,GAAG,CAACiG,WAAW,EAAE9G,IAAI,CAAC;cAAA,EAAC;gBAAA;gBAAA;cAAA;cAEtEiG,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;gBACnBiB,MAAM,EAAE,EAA+B;gBACvCqQ,YAAY,EAAE;eACf,CAAC;cAAC;cAAA,OACGqF,OAAO,CAAC3U,WAAW,EAAE6U,CAAC,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA,gBAE7BD,SAAS;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA,OAAWA,SAAS,CAACnW,UAAU,CAACQ,MAAM,EAAE4V,CAAC,CAAC;YAAA;cACnD3T,QAAQ,CAACgO,gBAAgB,IACvB9L,YAAY,CACVtC,OAAO,EACP,UAACxG,GAAG;gBAAA,OAAKP,GAAG,CAAC0E,UAAU,CAACQ,MAAM,EAAE3E,GAAG,CAAC;cAAA,GACpCiF,MAAM,CAACyB,KAAK,CACb;YAAC;cAAA;cAAA;YAAA;cAAA;cAAA;cAGNgU,iBAAiB,GAAG,KAAK;cAAC;YAAA;cAAA;cAG1BvW,UAAU,CAACmO,WAAW,GAAG,IAAI;cAC7BzN,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;gBACnB4O,WAAW,EAAE,IAAI;gBACjB0C,YAAY,EAAE,KAAK;gBACnBC,kBAAkB,EAChB1S,aAAa,CAAC4B,UAAU,CAACQ,MAAM,CAAC,IAAI+V,iBAAiB;gBACvD3F,WAAW,EAAE5Q,UAAU,CAAC4Q,WAAW,GAAG,CAAC;gBACvCpQ,MAAM,EAAER,UAAU,CAACQ;eACpB,CAAC;cAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAEN;MAAA;QAAA;MAAA;IAAA;EAAA;EAEH,IAAMgW,UAAU,GAAoC,SAA9CA,UAAU,CAAqC/b,IAAI,EAAc;IAAA,IAAZuK,OAAO,uEAAG,EAAE;IACrE,IAAI7J,WAAW,CAAC6J,OAAO,CAACvJ,YAAY,CAAC,EAAE;MACrCkZ,QAAQ,CAACla,IAAI,EAAEa,GAAG,CAACyG,cAAc,EAAEtH,IAAI,CAAC,CAAC;KAC1C,MAAM;MACLka,QAAQ,CAACla,IAAI,EAAEuK,OAAO,CAACvJ,YAAY,CAAC;MACpC0I,GAAG,CAACpC,cAAc,EAAEtH,IAAI,EAAEuK,OAAO,CAACvJ,YAAY,CAAC;;IAGjD,IAAI,CAACuJ,OAAO,CAAC6Q,WAAW,EAAE;MACxBtK,KAAK,CAACvL,UAAU,CAACK,aAAa,EAAE5F,IAAI,CAAC;;IAGvC,IAAI,CAACuK,OAAO,CAAC4Q,SAAS,EAAE;MACtBrK,KAAK,CAACvL,UAAU,CAACI,WAAW,EAAE3F,IAAI,CAAC;MACnCuF,UAAU,CAACG,OAAO,GAAG6E,OAAO,CAACvJ,YAAY,GACrC2W,SAAS,CAAC3X,IAAI,EAAEa,GAAG,CAACyG,cAAc,EAAEtH,IAAI,CAAC,CAAC,GAC1C2X,SAAS,EAAE;;IAGjB,IAAI,CAACpN,OAAO,CAAC2Q,SAAS,EAAE;MACtBpK,KAAK,CAACvL,UAAU,CAACQ,MAAM,EAAE/F,IAAI,CAAC;MAC9BoD,eAAe,CAAC0C,OAAO,IAAIwI,YAAY,EAAE;;IAG3CrI,SAAS,CAACC,KAAK,CAACpB,IAAI,mBAAMS,UAAU,EAAG;GACxC;EAED,IAAMyW,KAAK,GAA+B,SAApCA,KAAK,CACT1V,UAAU,EACW;IAAA,IAArB2V,gBAAgB,uEAAG,EAAE;IAErB,IAAMC,aAAa,GAAG5V,UAAU,IAAIgB,cAAc;IAClD,IAAM6U,kBAAkB,GAAG3N,WAAW,CAAC0N,aAAa,CAAC;IACrD,IAAMnV,MAAM,GAAG,CAACpD,aAAa,CAAC2C,UAAU,CAAC,GACrC6V,kBAAkB,GAClB7U,cAAc;IAElB,IAAI,CAAC2U,gBAAgB,CAACG,iBAAiB,EAAE;MACvC9U,cAAc,GAAG4U,aAAa;;IAGhC,IAAI,CAACD,gBAAgB,CAACI,UAAU,EAAE;MAChC,IAAI/C,KAAK,EAAE;QAAA,4CACUjT,MAAM,CAACyB,KAAK;UAAA;QAAA;UAA/B,uDAAiC;YAAA,IAAtB9H,MAAI;YACb,IAAM2H,KAAK,GAAG9G,GAAG,CAAC+G,OAAO,EAAE5H,MAAI,CAAC;YAChC,IAAI2H,KAAK,IAAIA,KAAK,CAACE,EAAE,EAAE;cACrB,IAAMsR,cAAc,GAAG1Z,KAAK,CAACC,OAAO,CAACiI,KAAK,CAACE,EAAE,CAACwC,IAAI,CAAC,GAC/C1C,KAAK,CAACE,EAAE,CAACwC,IAAI,CAAC,CAAC,CAAC,GAChB1C,KAAK,CAACE,EAAE,CAACS,GAAG;cAEhB,IAAI;gBACF6H,aAAa,CAACgJ,cAAc,CAAC,IAC3BA,cAAc,CAACmD,OAAO,CAAC,MAAM,CAAE,CAACN,KAAK,EAAE;gBACzC;eACD,CAAC,WAAM;;;QAEX;UAAA;QAAA;UAAA;QAAA;;MAGHhV,WAAW,GAAGjE,KAAK,CAACsE,gBAAgB,GAChC4U,gBAAgB,CAACG,iBAAiB,GAChC5N,WAAW,CAAClH,cAAc,CAAC,GAC3B,EAAE,GACJ6U,kBAAkB;MACtBvU,OAAO,GAAG,EAAE;MAEZ3B,SAAS,CAACO,KAAK,CAAC1B,IAAI,CAAC;QACnBiC,MAAM,EAANA;OACD,CAAC;MAEFd,SAAS,CAACgC,KAAK,CAACnD,IAAI,CAAC;QACnBiC,MAAM,EAANA;OACD,CAAC;;IAGJV,MAAM,GAAG;MACPyB,KAAK,EAAE,IAAI2G,GAAG,EAAE;MAChB6H,OAAO,EAAE,IAAI7H,GAAG,EAAE;MAClBxG,KAAK,EAAE,IAAIwG,GAAG,EAAE;MAChBjI,KAAK,EAAE,IAAIiI,GAAG,EAAE;MAChB7H,QAAQ,EAAE,KAAK;MACf4B,KAAK,EAAE;KACR;IAEDvC,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC;MACnBqR,WAAW,EAAE8F,gBAAgB,CAACM,eAAe,GACzChX,UAAU,CAAC4Q,WAAW,GACtB,CAAC;MACLzQ,OAAO,EAAEuW,gBAAgB,CAACd,SAAS,GAC/B5V,UAAU,CAACG,OAAO,GAClBuW,gBAAgB,CAACG,iBAAiB,GAClC,CAACnN,SAAS,CAAC3I,UAAU,EAAEgB,cAAc,CAAC,GACtC,KAAK;MACToM,WAAW,EAAEuI,gBAAgB,CAACO,eAAe,GACzCjX,UAAU,CAACmO,WAAW,GACtB,KAAK;MACT/N,WAAW,EAAEsW,gBAAgB,CAACd,SAAS,GACnC5V,UAAU,CAACI,WAAW,GACpBsW,gBAAgB,CAACG,iBAAiB,IAAI9V,UAAU,GAC9C7C,MAAM,CAACgZ,OAAO,CAACnW,UAAU,CAAC,CAACnF,MAAM,CAC/B,UAAC+Q,QAAQ;QAAA;UAAG9Q,GAAG;UAAE9B,KAAK;QAAA,OAACmE,gCAClByO,QAAQ,uBACV9Q,GAAG,EAAG9B,KAAK,KAAKuB,GAAG,CAACyG,cAAc,EAAElG,GAAG,CAAC;MAAA,CACzC,EACF,EAAE,CACH,GACD,EAA6C;MACrDwE,aAAa,EAAEqW,gBAAgB,CAACb,WAAW,GACvC7V,UAAU,CAACK,aAAa,GACvB,EAA4C;MACjDG,MAAM,EAAEkW,gBAAgB,CAACS,UAAU,GAC/BnX,UAAU,CAACQ,MAAM,GAChB,EAAgC;MACrCqQ,YAAY,EAAE,KAAK;MACnBC,kBAAkB,EAAE;KACrB,CAAC;IAEFnO,WAAW,CAACJ,KAAK,GACf,CAAC1E,eAAe,CAAC0C,OAAO,IAAI,CAAC,CAACmW,gBAAgB,CAACZ,WAAW;IAC5DnT,WAAW,CAAC1B,KAAK,GAAG,CAAC,CAACzD,KAAK,CAACsE,gBAAgB;GAC7C;EAED,IAAMsV,QAAQ,GAAkC,SAA1CA,QAAQ,CAAmC3c,IAAI;IACnD,IAAM2H,KAAK,GAAG9G,GAAG,CAAC+G,OAAO,EAAE5H,IAAI,CAAC,CAAC6H,EAAE;IACnC,CAACF,KAAK,CAACW,GAAG,CAACE,KAAK,GAAGb,KAAK,CAACW,GAAG,GAAGX,KAAK,CAAC0C,IAAI,CAAC,CAAC,CAAC,EAAE7B,KAAK,EAAE;GACtD;EAED,OAAO;IACLnD,OAAO,EAAE;MACPmC,QAAQ,EAARA,QAAQ;MACRY,UAAU,EAAVA,UAAU;MACVgG,cAAc,EAAdA,cAAc;MACdlH,SAAS,EAATA,SAAS;MACTyQ,SAAS,EAATA,SAAS;MACTrJ,YAAY,EAAZA,YAAY;MACZnH,gBAAgB,EAAhBA,gBAAgB;MAChBuG,iBAAiB,EAAjBA,iBAAiB;MACjBV,cAAc,EAAdA,cAAc;MACd/G,SAAS,EAATA,SAAS;MACT7C,eAAe,EAAfA,eAAe;MACf,IAAIwE,OAAO;QACT,OAAOA,OAAO;OACf;MACD,IAAIA,OAAO,CAACtI,KAAK;QACfsI,OAAO,GAAGtI,KAAK;OAChB;MACD,IAAI0H,WAAW;QACb,OAAOA,WAAW;OACnB;MACD,IAAIA,WAAW,CAAC1H,KAAK;QACnB0H,WAAW,GAAG1H,KAAK;OACpB;MACD,IAAI4I,WAAW;QACb,OAAOA,WAAW;OACnB;MACD,IAAIA,WAAW,CAAC5I,KAAK;QACnB4I,WAAW,GAAG5I,KAAK;OACpB;MACD,IAAIgI,cAAc;QAChB,OAAOA,cAAc;OACtB;MACD,IAAIA,cAAc,CAAChI,KAAK;QACtBgI,cAAc,GAAGhI,KAAK;OACvB;MACD,IAAI+G,MAAM;QACR,OAAOA,MAAM;OACd;MACD,IAAIA,MAAM,CAAC/G,KAAK;QACd+G,MAAM,GAAG/G,KAAK;OACf;MACD,IAAIiG,UAAU;QACZ,OAAOA,UAAU;OAClB;MACD,IAAIA,UAAU,CAACjG,KAAK;QAClBiG,UAAU,GAAGjG,KAAK;OACnB;MACD,IAAI0I,QAAQ;QACV,OAAOA,QAAQ;OAChB;MACD,IAAIA,QAAQ,CAAC1I,KAAK;QAChB0I,QAAQ,mCACHA,QAAQ,GACR1I,KAAK,CACT;;KAEJ;IACDya,OAAO,EAAPA,OAAO;IACPvS,QAAQ,EAARA,QAAQ;IACRgU,YAAY,EAAZA,YAAY;IACZhV,KAAK,EAALA,KAAK;IACL0T,QAAQ,EAARA,QAAQ;IACRb,SAAS,EAATA,SAAS;IACT2C,KAAK,EAALA,KAAK;IACLD,UAAU,EAAVA,UAAU;IACVnB,WAAW,EAAXA,WAAW;IACXxS,UAAU,EAAVA,UAAU;IACV0S,QAAQ,EAARA,QAAQ;IACR6B,QAAQ,EAARA;GACD;AACH;SCtsCgBC,OAAO,GAI2B;EAAA,IAAhD7Z,4EAA8C,EAAE;EAEhD,IAAM8Z,YAAY,GAAGna,KAAK,CAACuC,MAAM,EAE9B;EACH,uBAAqCvC,KAAK,CAAC4C,QAAQ,CAA0B;MAC3EI,OAAO,EAAE,KAAK;MACdG,YAAY,EAAE,KAAK;MACnBF,WAAW,EAAE,EAA2C;MACxD+N,WAAW,EAAE,KAAK;MAClByC,WAAW,EAAE,CAAC;MACdvQ,aAAa,EAAE,EAA2C;MAC1DwQ,YAAY,EAAE,KAAK;MACnBC,kBAAkB,EAAE,KAAK;MACzBvQ,OAAO,EAAE,KAAK;MACdC,MAAM,EAAE;KACT,CAAC;IAAA;IAXK5C,SAAS;IAAEqC,eAAe;EAajC,IAAIqX,YAAY,CAACvc,OAAO,EAAE;IACxBuc,YAAY,CAACvc,OAAO,CAAC+E,OAAO,CAAC2C,QAAQ,GAAGjF,KAAK;GAC9C,MAAM;IACL8Z,YAAY,CAACvc,OAAO,mCACf4V,iBAAiB,CAACnT,KAAK,CAAC;MAC3BI,SAAS,EAATA;IAAS,EACV;;EAGH,IAAMkC,OAAO,GAAGwX,YAAY,CAACvc,OAAO,CAAC+E,OAAO;EAE5CL,YAAY,CAAC;IACXJ,OAAO,EAAES,OAAO,CAACY,SAAS,CAACC,KAAK;IAChCnB,QAAQ,EAAE,kBAAC5B,SAAS;MAClB,IAAIW,qBAAqB,CAACX,SAAS,EAAEkC,OAAO,CAACjC,eAAe,EAAE,IAAI,CAAC,EAAE;QACnEiC,OAAO,CAACE,UAAU,mCACbF,OAAO,CAACE,UAAU,GAClBpC,SAAS,CACb;QAEDqC,eAAe,mBAAMH,OAAO,CAACE,UAAU,EAAG;;;GAG/C,CAAC;EAEF7C,KAAK,CAACwC,SAAS,CAAC;IACd,IAAI,CAACG,OAAO,CAAC6C,WAAW,CAACJ,KAAK,EAAE;MAC9BzC,OAAO,CAACjC,eAAe,CAAC0C,OAAO,IAAIT,OAAO,CAACiJ,YAAY,EAAE;MACzDjJ,OAAO,CAAC6C,WAAW,CAACJ,KAAK,GAAG,IAAI;;IAElC,IAAIzC,OAAO,CAAC6C,WAAW,CAAC1B,KAAK,EAAE;MAC7BnB,OAAO,CAAC6C,WAAW,CAAC1B,KAAK,GAAG,KAAK;MACjCnB,OAAO,CAACY,SAAS,CAACC,KAAK,CAACpB,IAAI,CAAC,EAAE,CAAC;;IAElCO,OAAO,CAAC8B,gBAAgB,EAAE;GAC3B,CAAC;EAEF0V,YAAY,CAACvc,OAAO,CAAC6C,SAAS,GAAGD,iBAAiB,CAChDC,SAAS,EACTkC,OAAO,CAACjC,eAAe,CACxB;EAED,OAAOyZ,YAAY,CAACvc,OAAO;AAC7B","names":["isCheckBoxInput","element","type","isDateObject","data","Date","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","getControllerValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","some","current","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","omit","source","copy","HookFormContext","React","createContext","useFormContext","useContext","FormProvider","props","Provider","children","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","shouldSubscribeByName","signalName","currentName","startsWith","tearDown","_subscription","unsubscribe","updateSubscriptionProps","_props","disabled","subject","subscribe","next","callback","useSubscribe","useRef","useEffect","useFormState","methods","control","useState","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_subjects","state","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","useWatch","fieldValues","values","_formValues","updateValue","_getWatch","_removeUnmounted","useController","shouldUnregister","_defaultValues","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","array","_stateFlags","action","unregister","keepDefaultValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","getFocusFieldName","options","shouldFocus","focusName","focusIndex","mapCurrentIds","_fieldIds","keyName","output","generateId","d","performance","now","c","r","Math","random","toString","mapIds","append","fillEmptyArray","insert","slice","moveArrayAt","from","to","splice","omitKeys","prepend","removeAtIndexes","indexes","i","temp","removeArrayAt","sort","a","b","swapArrayAt","indexA","indexB","updateAt","useFieldArray","_getFieldArray","setFields","_actioned","fieldArrayName","updateValues","useCallback","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","appendValue","appendAt","_updateFieldArray","argA","prependAt","remove","insertAt","argB","swap","move","update","watchField","_executeSchema","then","_updateValid","isFunction","cloneObject","Set","createSubject","_observers","observer","push","o","observers","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isBoolean","isFileInput","isHTMLElement","HTMLElement","isMultipleSelect","isRadioInput","isRadioOrCheckboxFunction","window","document","live","contains","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","defaultResult","validResult","getCheckboxValue","option","attributes","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","every","files","selectedOptions","isCheckBox","getResolverOptions","criteriaMode","shouldUseNativeValidation","hasValidation","schemaErrorLookup","join","foundError","pop","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","setFieldArrayDirtyFields","skipValidation","isBlurEvent","isSubmitted","reValidateMode","unsetEmptyArray","isMessage","isValidElement","isRegex","RegExp","getValidateError","getValueAndMessage","validationData","inputValue","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","maxOutput","minOutput","valueNumber","parseFloat","exceedMin","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","validateField","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","has","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldSetFields","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","deps","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValid","fieldRef","querySelectorAll","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/useWatch.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/schemaErrorLookup.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n) =>\n  !name ||\n  !signalName ||\n  name === signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\ntype Payload<T> = {\n  _subscription: React.MutableRefObject<Subscription | undefined>;\n  _props: React.MutableRefObject<Props<T>>;\n};\n\nconst tearDown = (\n  _subscription: React.MutableRefObject<Subscription | undefined>,\n) => {\n  if (_subscription.current) {\n    _subscription.current.unsubscribe();\n    _subscription.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps = <T>({ _subscription, _props }: Payload<T>) => {\n  if (_props.current.disabled) {\n    tearDown(_subscription);\n  } else if (!_subscription.current) {\n    _subscription.current = _props.current.subject.subscribe({\n      next: _props.current.callback,\n    });\n  }\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _subscription = React.useRef<Subscription>();\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  updateSubscriptionProps({\n    _subscription,\n    _props,\n  });\n\n  React.useEffect(() => {\n    updateSubscriptionProps({\n      _subscription,\n      _props,\n    });\n\n    return () => tearDown(_subscription);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        formState.name,\n      ) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport function generateWatchOutput(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\n","import * as React from 'react';\n\nimport { generateWatchOutput } from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: TFieldNames;\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  });\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name, { keepDefaultValue: true });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getControllerValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n    setFields(_fieldIds.current);\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport { generateWatchOutput } from './generateWatchOutput';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"]},"metadata":{},"sourceType":"module"}